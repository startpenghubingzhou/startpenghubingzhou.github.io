[{"title":"Xcode IOKit驱动开发模板","date":"2023-05-22T08:56:52.000Z","path":"2023/05/22/Xcode-IOKit-Driver-Template/","content":"<p>这是一个Xcode的开发模板，用来方便开发IOKit驱动的。</p>\n<span id=\"more\"></span> \n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我的主力开发生涯，基本都是在我的黑苹果上完成的，而我黑果的开发生涯，是从学习IOKit开始的。从开始学习IOKit到现在，我十分头疼的一件事之一恐怕就是建立IOKit驱动工程的过程了。说句实话，我一直觉得Windows下的开发不如macOS下开发舒服，因为Windows的几个常见IDE（开发环境）我是怎么看怎么土，而且有的IDE用起来真是让人头秃（没错，说的就是你，QtCreator，别躲了）。</p>\n<p>但是你说在macOS（黑苹果）下面使用Xcode开发就一定很舒服了么？也不是，至少有两点，我是十分不舒服的，一个是Xcode那一堆让人抓狂而又无可奈何的英文，另一个就是Xcode那令人觉得十分鸡肋的模板了（这里点名表扬VS，虽然我对VS的那个界面极度嫌弃，但是VS不管什么工程，基本上补全的示例代码是既友好又能看懂，确实很舒服）。</p>\n<p>假设，你现在就是一名开发者，你现在要建立一个IOKit工程来开发你自己的驱动，当工程建立完成以后，你会发现映入你眼帘的，是这样一行代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Add your code here */</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在最开始学习IOKit的时候，我的第一反应就是：WC，你这给了等于没给嘛，连几行示例代码都不舍得给，Xcode我xxxx（此处略去一万字国粹）……</p>\n<p>可是，骂归骂，写还是要写的。没办法，我只能一边骂，一边忍受着一堆英文和没有模板的工程写我的项目。</p>\n<p>后来，一个机遇，我部分解决了Xcode的中文显示问题（这里是这个项目的<a href=\"https://github.com/startpenghubingzhou/Xcode-language-pack-cn\">传送门</a>），但是这个IOKit的驱动模板问题却始终没有得到解决。</p>\n<p>转机出现在今天的上午。我本来是要研究在Xcode中AI补全代插件开发的问题，却无意间浏览到了<a href=\"https://github.com/kattrali\">kattrali</a> 老哥的 <a href=\"https://github.com/kattrali/Xcode-Plugin-Template\">Xcode-Plugin-Template</a>项目。在这，我突然就迸发了一丝火花，既然他都可以创造出一个模板来，我为什么就不能动手改进现有的IOKit模板来方便我的创作呢？</p>\n<img src=\"/2023/05/22/Xcode-IOKit-Driver-Template/0.jpg\" class=\"\" alt=\"my post image\">\n\n<p>说干就干，我首先提取出了我现在使用的Xcode9.3版本的<code>IOKit Driver.xctemplate</code>文件，然后对这里的文件与kattrali](<a href=\"https://github.com/kattrali\">https://github.com/kattrali</a>) 老哥项目的文件进行比对分析，经过了几个小时的摸索努力，终于成功改造出来了全新的IOKit模板！</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>在写IOKit的时候，我们有些必要的代码是需要补全的，比如在头文件里，你会写出这样的类似代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef qqq_h</span><br><span class=\"line\">#define qqq_h</span><br><span class=\"line\"></span><br><span class=\"line\">// IOKit库基本头文件需要引入</span><br><span class=\"line\">#include &lt;IOKit/IOLib.h&gt;</span><br><span class=\"line\">#include &lt;IOKit/IOService.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义你的设备类，并继承IOService（也有可能是IOService的子类或者是OSObject）</span><br><span class=\"line\">class qqq : public IOService &#123;</span><br><span class=\"line\">// OSMetaClass宏定义，负责为你的IOKit驱动引入OSMetaClass管理机制</span><br><span class=\"line\">    OSDeclareDefaultStructors(qqq)</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">// IOService基本函数</span><br><span class=\"line\">    virtual bool start(IOService* provider) APPLE_KEXT_OVERRIDE;</span><br><span class=\"line\"></span><br><span class=\"line\">    virtual void stop(IOService* provider) APPLE_KEXT_OVERRIDE;</span><br><span class=\"line\"> </span><br><span class=\"line\">//定义你需要的各种函数</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif /* qqq_h */</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而在cpp文件里，你还要实现这样的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入你定义好的头文件</span><br><span class=\"line\">#include &quot;qqq.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义父类，方便对父类进行操作</span><br><span class=\"line\">#define super IOService</span><br><span class=\"line\"></span><br><span class=\"line\">// OSMetaClass宏定义，负责OSMetaClass对象及其成员的初始化，并定义驱动初始化函数</span><br><span class=\"line\">OSDefineMetaClassAndStructors(qqq, super)</span><br><span class=\"line\"></span><br><span class=\"line\">// 实现你在头文件声明的各类函数</span><br></pre></td></tr></table></figure>\n\n<p>各位，你们看到了吧，这仅仅是一个最基本的IOKit驱动的代码，就需要这么些，这可不是简简单单一句<code>/* add your code here */</code> 就能概括得了啊。如果你每次写一个IOKit驱动，就意味着你都需要重复写一遍这些代码，不仅耗费时间不说，还容易出现错误，在这种无谓的事情上浪费时间，有必要么……</p>\n<p>所以，这个项目就是干这件事的。具体来说，它可以干以下三个任务：</p>\n<ul>\n<li>补全IOKit基本代码</li>\n<li>添加必要注释</li>\n<li>为IOKit驱动提供<code>headerdoc</code>风格文档示例（Xcode自带文档格式）</li>\n</ul>\n<p>当你使用了这个模板以后，你只需要建立一个IOKit工程，系统就会自动为你提供一个现成的代码示例，方便你的开发：</p>\n<img src=\"/2023/05/22/Xcode-IOKit-Driver-Template/1.png\" class=\"\" alt=\"my post image\">\n\n<img src=\"/2023/05/22/Xcode-IOKit-Driver-Template/2.png\" class=\"\" alt=\"my post image\">\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>要想使用这个模板，很简单，只需要你将这个模板放到 <code>/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/Project Templates/Mac/Other/ </code> ，替换原目录下的 <code>IOKit Driver.xctemplate</code>，然后重启你的Xcode，就可以尽情享受这个模板的便利了。</p>\n<p>目前这个模板已经在Xcode9.3上测试通过了，Xcode 9系列大概率能过，其他版本请自行测试，本人不对其他版本的测试所造成的损失负责。</p>\n<h2 id=\"许可证以及传送门\"><a href=\"#许可证以及传送门\" class=\"headerlink\" title=\"许可证以及传送门\"></a>许可证以及传送门</h2><p>这个模板使用MIT许可证，<a href=\"https://github.com/startpenghubingzhou/Xcode-IOKit-Driver-Template\">传送门见这里</a>。</p>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p><a href=\"https://github.com/kattrali\">@kattrali</a> 的 <a href=\"https://github.com/kattrali/Xcode-Plugin-Template\">Xcode-Plugin-Template</a></p>\n","tags":[{"name":"IOKit","slug":"IOKit","permalink":"https://startpenghubingzhou.github.io/tags/IOKit/"},{"name":"开发， Xcode","slug":"开发，-Xcode","permalink":"https://startpenghubingzhou.github.io/tags/%E5%BC%80%E5%8F%91%EF%BC%8C-Xcode/"}]},{"title":"2023，从新出发","date":"2023-05-10T05:37:03.000Z","path":"2023/05/10/2023 New/","content":"<p>新的开始，新的起点！</p>\n<span id=\"more\"></span> \n\n<p>一直有很多人问我，我的博客为什么不更新了。拖了很久，我也没有给大家一个交代，而这篇文章，正是这个欠缺了两年的交代……</p>\n<p>两年前的2021年，因为一次意外，我的hexo博客原始数据文件全部丢失，建站文件全部不在。当时的我几近崩溃， 很长时间都没能缓过劲来。尽管后来，我数次尝试恢复我的博客，但因为工作量巨大，加上21-23年这两年里我几乎一直在繁忙（毕业、工作、下村、学习IOKit等等），都没能抽出时间好好打理我的博客。</p>\n<p>促使我下定决心重整我的博客是源于前段时间的一些事情，那些事情使我得以腾出时间来真正好好审视我的博客，并下定决心整顿我的博客。</p>\n<p>一别两年，黑果界变化巨大，随着OC的日趋完善以及各类新晋涌现出来的黑果极客（如GZ小白、我群里的某位管理等等）撰写了越来越完善的教程，如今的黑苹果已经走入了更多人手中。同时，随着苹果全面拥抱M系列ARM自研处理器，黑苹果也已经走上了穷途末路，就连我本人也是躺在10.13.6养老。黑果界的风向标，昔日热闹无比的远景论坛黑果区也不复往日辉煌。</p>\n<p>一别两年，我也从一个当初青涩稚嫩的大学生，蜕变成为社会的打工人，为自己的事业，为自己的未来拼搏；从当初与同学舍友怼天怼地，到现在谨言慎行；从当初熬夜拼命玩黑果，到现在早睡早起。</p>\n<p>一别两年，macOS从大苏尔（Big Sur）变成了温图拉（Ventura），牙膏厂从挤11代牙膏，到挤13代牙膏，老对手AMD依旧Yes，矿卡依旧一堆，挖矿的人却都不见了踪影。</p>\n<p>两年，变化太多了，三言两语根本说不清，但不变的，是我对技术的热爱和追求。这一次，我要用一个全新的博客来迎接新的时代，我的博客文章方向也将从黑果技术为主转向macOS系统探究为主。也许有一天，我们所热爱的东西会成为过去，也许有一天，我们自身也成为了老人，但都不是今天。今天，我们为热爱而奋斗，为热爱而感动！</p>\n<p>2023，从新出发，有我，有你！</p>\n","tags":[{"name":"essay","slug":"essay","permalink":"https://startpenghubingzhou.github.io/tags/essay/"}]},{"title":"GalioEthernet9601:一个全新的DM9601转接器驱动","date":"2020-11-20T03:13:33.000Z","path":"2020/11/20/GalioEthernet9601/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>各位好，很久没有更新些干货了，真是抱歉。这一年自己真的很忙，忙学习，忙着准备考研，事情繁杂，所以直到现在才抽出空来搞搞这些。</p>\n<p>将近一年的时间里，除了学习以外的生活，我基本醉心于IOKit的驱动开发。在我心里，能写出来IOKit的驱动，是检验自己能力的标志之一。前两天我的这个项目总算有了些眉目，目前也基本到了能识别的状态。所以我选择把它拿出来，给各位分享下。</p>\n<span id=\"more\"></span> \n\n<img src=\"/2020/11/20/GalioEthernet9601/Galio.jpg\" class=\"\" alt=\"my post image\">\n\n<p>没错，你没看错。我做了这个项目的初衷，真的是致敬我最爱的英雄联盟里最喜欢的英雄之一——加里奥的。（嗨，大家好~）</p>\n<p>皮这一下我很开心，下面我们说点正经的。 GalioEthernet9601是一个基于Davicom公司的DM9601 USB转接器开发的MacOS开源驱动 (详细说明请见 <a href=\"https://github.com/samuelv0304/USBCDCEthernet\">samuelv0304的项目</a>))。实际上，你可以把它看作是对<strong>USBCDCEthernet</strong>的一个重写和升级的项目。</p>\n<p>USBCDCEthernet是一个十分完善的驱动,自从我上了大一以后，这个网卡我就在用过，配合USBCDCEthernet，在黑果下工作十分完美。不过美中不足，这个驱动很久没人维护了，将近七年的时间，苹果的底层代码早已大变样。当这个驱动来到大苏尔时代时，它的代码就不那么好运行在大苏尔上了；除此之外，由于过于老旧，你没法在新版系统上编译USBCDCEthernet项目的源码，因为USBCDCEthernet项目源码是基于IOUSBDevice作为提供者类（Provider）来开发的。然鹅，早在12 Sierra时代，苹果就已经废弃了IOUSBDevice相关的头文件，让开发者迁移到IOUSBHostDevice上。所以只要你的MacOS版本大于12.0，这个驱动基本你就没什么办法编译了（除非你强行用旧版SDK或者使用MacKernelSDK。可即便这样，这个驱动的编译依旧很费劲）。</p>\n<p>更加糟糕的是，经过我对这个驱动的源码的检查，发现里面有很多代码都是苹果已经不推荐使用的代码（比如这个驱动的定时器事件代码，没有使用苹果驱动目前通常使用的OSMemberFunctionCast宏来转换）。另外，这里面使用了10.9时代由IOUSBFamily示例改写的CDC源码，里面由于IOLog函数的版本问题，在高版本MacOS上已经无法输出日志，这对于驱动故障的排除很是不便。</p>\n<p>基于以上种种理由，最后我下定了决心：重写这个驱动。</p>\n<p>重写的路并非一帆风顺。IOKit的学习资料并不算很多，我查阅了不少东西，也包括问了不少人（包括PMHeart老阿姨、Kishor老哥还有Intel无线网卡驱动的开发者Zxystd等人在内），经过差不多大半年的折腾，现在终于可以拿出来一个相对比较完善的成品出来给大家，也当做自己的一个处女作品。</p>\n<h2 id=\"它能做什么\"><a href=\"#它能做什么\" class=\"headerlink\" title=\"它能做什么?\"></a>它能做什么?</h2><p>就像我说的一样，这是一个由USBCDCEthernet <strong>重写的</strong> 项目，因此理论上 USBCDCEthernet能做到什么，它也能做到什么。目前为止，我已经移植了原USBCDCEthernet将近五分之四的源码，源码的移植工作已经趋近尾声。我还没有计划加入一些新的东西， 也许有一天，当它完全移植了USBCDCEthernet的所有原有代码后，我就可以着手加些新东西了。</p>\n<p>截止本文发稿时，我已经实现了在MacOS上识别此设备（显示为“自分配的IP“，实际还不能上网，因为上网通信相关的函数尚未移植完成），并且插上网线也能亮灯。目前我的计划是在闲暇时间内，将剩余部分的源码移植完成，并着手排除一些驱动错误，优化驱动代码，使它的运行效率更高。</p>\n<p>一群人的力量总是大过一个人。如果你对这个项目有一些好主意，只需要在issue页面写下来就好。如果你有好的代码要贡献，欢迎随时送达PR给我。</p>\n<p>目前据我了解的情况是，市面上绝大多数USB网线转接器，使用的都是RD9700这个型号，也就是DM9601芯片。因此，应该很容易测试开发这个驱动。</p>\n<h2 id=\"我怎样安装它\"><a href=\"#我怎样安装它\" class=\"headerlink\" title=\"我怎样安装它?\"></a>我怎样安装它?</h2><ul>\n<li>从这里下载并用Xcode编译它。</li>\n<li>使用sudo把驱动拷贝到&#x2F;System&#x2F;Library&#x2F;Extensions然后重建缓存(或者通过OC&#x2F;Clover注入，仅限黑苹果)。</li>\n</ul>\n<p>我在13.6上已经测试过，它很可能支持12.0以上版本，但我目前尚未测试。</p>\n<p>顺带放几张已经测试的照片：</p>\n<p>首先是驱动加载时的情况：</p>\n<img src=\"/2020/11/20/GalioEthernet9601/test1.jpg\" class=\"\" alt=\"my post image\">\n\n\n\n<img src=\"/2020/11/20/GalioEthernet9601/test2.jpg\" class=\"\" alt=\"my post image\">\n\n\n\n<img src=\"/2020/11/20/GalioEthernet9601/test3.jpg\" class=\"\" alt=\"my post image\">\n\n\n\n<p>然后是驱动卸载的情况：</p>\n<img src=\"/2020/11/20/GalioEthernet9601/test4.jpg\" class=\"\" alt=\"my post image\">\n\n\n\n<p>目前来说，这个驱动已经可以正常卸载和加载了，且能够被系统识别出来，剩下的就是网络通信功能的添加（实际上在这个图里我已经移植了一部分的网络通信功能）。</p>\n<h2 id=\"驱动下载以及开发文档\"><a href=\"#驱动下载以及开发文档\" class=\"headerlink\" title=\"驱动下载以及开发文档\"></a>驱动下载以及开发文档</h2><ul>\n<li>有关驱动下载的方式，请访问 <a href=\"https://github.com/startpenghubingzhou/GalioEthernet9601\">GitHub</a> 获取下载。</li>\n<li>有关DM9601的开发信息，可以从 <a href=\"https://github.com/startpenghubingzhou/GalioEthernet9601/blob/main/Documentation/DM9601-DS-P01-930914.pdf\">这里</a> 获取。</li>\n</ul>\n<h2 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h2><ul>\n<li>@<a href=\"https://github.com/haiku\">haiku</a> 的 <a href=\"https://github.com/haiku/haiku\">haiku project</a></li>\n<li>@<a href=\"https://github.com/samuelv0304\">samuelv0304</a> 的 <a href=\"https://github.com/samuelv0304/USBCDCEthernet\">USBCDCEthernet</a><strong>(致以最崇高的敬意！)</strong></li>\n<li>@<a href=\"https://github.com/zxystd\">zxystd </a>对此项目编写的帮助</li>\n</ul>\n<h2 id=\"许可证\"><a href=\"#许可证\" class=\"headerlink\" title=\"许可证\"></a>许可证</h2><p>这个项目的代码遵循 <strong>苹果公共源代码许可证（ASPL）</strong>。点击License可以查询更多相关信息。</p>\n","tags":[{"name":"IOKit","slug":"IOKit","permalink":"https://startpenghubingzhou.github.io/tags/IOKit/"},{"name":"驱动","slug":"驱动","permalink":"https://startpenghubingzhou.github.io/tags/%E9%A9%B1%E5%8A%A8/"}]},{"title":"联想小新潮7000 EFI for OpenCore 0.2 beta更新","date":"2019-10-09T05:37:03.000Z","path":"2019/10/09/Lenovo Xiaoxin Chao7000 EFI OC 0.2 Update/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在昨天，苹果正式释出了15正式版的下载，广大黑果爱好者也在第一时间进行了升级。新的15加入了很多特性，如不再支持32位程序，拆分iTunes等，是一个值得体验的版本。</p>\n<p>经过一天的紧张测试，我首先调试好了OpenCore系列的EFI，并测试无误，现在将其分享出来供大家参考</p>\n<span id=\"more\"></span> \n\n<h1 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h1><p>本版本的更新如下：</p>\n<p><strong>1、更新一系列驱动（Lilu、VoodooI2C、WhateverGreen等）</strong><br><strong>2、升级OC核心至0.5.1，兼容Catalina</strong></p>\n<p><strong>3、精简了一些无用的efi驱动，增加了SSDT-EC修复进入15卡死的问题</strong></p>\n<p><strong>4、依照Samplefull.plist修复了一些无用的代码以及条目，增加了MSR锁测试</strong></p>\n<p><strong>5、依照宪武提供的OC方法修正了部分SSDT，尤其是触摸板的热补丁，移除XOSI以修复VoodooI2C随机性五国问题</strong></p>\n<p>另：苹果对15的USB API大改，增加了USB内建bundle，现在，困扰已久的FaceTime黑屏问题在15得到彻底解决！！！！</p>\n<p>全版本统一下载地址：<a href=\"https://pan.baidu.com/s/1QcrvxI5a68eUH37RmNd-Fg#list/path=%2F\">点我下载</a></p>\n<h1 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h1><p>目前存在的已知问题有：</p>\n<p><strong>1、锁MSR问题，CPU变频锁定1.6GHZ，目前尚在寻找解决方案。</strong><br><strong>2、VoodooI2C右键问题（求Alex早日找出问题……）</strong></p>\n<p>其他问题有待各位反馈。</p>\n<h1 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h1><p>谨在此向所有为本版本更新作出贡献的人致谢！！！！</p>\n<p>@宪武 OC-little以及触摸板指导</p>\n","tags":[{"name":"config","slug":"config","permalink":"https://startpenghubingzhou.github.io/tags/config/"},{"name":"更新","slug":"更新","permalink":"https://startpenghubingzhou.github.io/tags/%E6%9B%B4%E6%96%B0/"}]},{"title":"联想小新潮7000 EFI 3.4更新","date":"2019-05-02T05:37:03.000Z","path":"2019/05/02/Lenovo Xiaoxin Chao7000 EFI 3.4 Update/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>虽然现在仍然处于休假调整状态，既没有管理论坛，也没有为任何坛友群友解答黑果问题，不过，这几天我也并未放飞自我。</p>\n<p>最近几天除了忙着我的APP之外，剩余的时间 ，便是苦心钻研13寸的热补丁以及触摸问题（也就是上个版本3.3合并13寸工程之后遗留的问题）。在宪武大神的帮助下，我成功的完成了这两个问题的修复，现在将这个新的release奉献出来！</p>\n<span id=\"more\"></span> \n\n<h1 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h1><p>本版本的更新如下：</p>\n<p><strong>1、修复13寸的触摸板、电池（电池以热补丁形式放送）</strong><br><strong>2、修复MakeInstall脚本的安装问题3、修复获取Root权限时卡顿的问题（帖子详情见这里）</strong></p>\n<p>本来预想是在这个版本加入VoodooI2C的2.1.6最新版，但由于目前2.1.6存在重大问题，考虑本版本追求稳定的因素，目前暂时不予合并，有需要的同学可自行下载食用。</p>\n<p><strong>另：经确认，部分18款本子，DSDT与潮7000 13寸&#x2F;14寸（81bs）基本一致，安装时，安装此版本的即可。部分18款本子的触摸版型号为SYNA2395，需要进一步适配，这类同学请等待适配。</strong></p>\n<p>全版本统一下载地址：<a href=\"https://pan.baidu.com/s/1QcrvxI5a68eUH37RmNd-Fg#list/path=%2F\">点我下载</a></p>\n<h1 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h1><p>目前存在的已知问题有：</p>\n<p><strong>1、摄像头问题（老生无解）</strong><br><strong>2、VoodooI2C右键问题（求Alex早日找出问题……）</strong></p>\n<p>其他问题有待各位反馈。</p>\n<h1 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h1><p>谨在此向所有为本版本更新作出贡献的人致谢！！！！</p>\n<p>@宪武 电池热补丁指导<br>@<a href=\"http://i.pcbeta.com/space-uid-4806942.html\">maple枫舞</a> 卡顿问题贡献<br>@Acidanthera Lilu以及NoTouchID<br>@Toronto MakeInstall脚本修正 测试<br>@<a href=\"http://i.pcbeta.com/space-uid-1148352.html\">zhoufeng1209</a> 测试</p>\n","tags":[{"name":"config","slug":"config","permalink":"https://startpenghubingzhou.github.io/tags/config/"},{"name":"更新","slug":"更新","permalink":"https://startpenghubingzhou.github.io/tags/%E6%9B%B4%E6%96%B0/"}]},{"title":"电池热补丁制作教程","date":"2019-05-02T05:37:03.000Z","path":"2019/05/02/Battery Hotpatch Make/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这个教程，是基于宪武大神的口述，加上博主的亲身实践并精心整理而成的，且发布已经得到宪武大神的授权，任何其他形式的转载请注明出处！！！教程并不一定适用于所有情况，只是给各位提供一个比较基础的思路。如果中间有任何问题，欢迎反馈给我，好让我及时更新教程。</p>\n<span id=\"more\"></span> \n\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E6%8E%88%E6%9D%83.png\" class=\"\" alt=\"my post image\">\n\n<h1 id=\"我为什么要修改\"><a href=\"#我为什么要修改\" class=\"headerlink\" title=\"我为什么要修改\"></a>我为什么要修改</h1><p>修改这个的意义，实际就是热补丁的意义。尽管我已经在我的另一篇<a href=\"http://bbs.pcbeta.com/viewthread-1797378-1-1.html\">教程</a>里面说过了热补丁的好处，我还是乐意在这里再复述一遍。</p>\n<p><strong>热补丁的编辑更加高效。</strong>使用热补丁，你不需要去修改其他的无关代码，也不需要你去联合反编译DSDT然后除错，更是大大节省了你的工程量。</p>\n<p><strong>热补丁更加安全。</strong>如果热补丁导致你的启动出现问题，你只需要还原对应的热补丁修改（删除热补丁）即可，既快捷又方便，并且也无需备份什么。而如果是DSDT，在改动前你必须备份原有DSDT，而且出了问题时排除代码是个很让人头疼的问题。</p>\n<p><strong>热补丁管理方便。</strong>每个功能可以写一个热补丁，无论是配置文件里还是SSDT，都方便管理与添加；并且由于热补丁的动态注入特性，在部分情况下可以实现直接修改DSDT报错而不能完成的修改。</p>\n<p><strong>热补丁与平台无关</strong>。由于这一点，有些修改的热补丁可以跨平台使用，大大提高了黑果的移植度以及修改工程量。尤其是，当你发现某些机型的DSDT不能通用但是却具有高度相似的修改时，热补丁的优势将尤其明显(比如潮7000 13寸与14寸，以及潮5000关于触摸板的部分)</p>\n<p>基于上述这几点，我们也显然可以看到了电池热补丁的优势：<strong>跨平台、易修改、易参考、高度可移植</strong>。</p>\n<h1 id=\"阅读预备\"><a href=\"#阅读预备\" class=\"headerlink\" title=\"阅读预备\"></a>阅读预备</h1><p>正如我一直跟黑果进阶的同学反复强调的那样，热补丁是DSDT的延伸，因此，基于这一点，以下情况，我不推荐您阅读此教程：</p>\n<ul>\n<li>没有良好的DSDT基础</li>\n<li>电池尚未用DSDT补丁修改好</li>\n</ul>\n<p>在阅读本教程之前，建议先去阅读下这篇帖子：<a href=\"http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1778499&highlight=\">修改dsdt实现电量显示方法（整理修改已有帖子)</a>，了解下基础的字节以及补丁工作原理，然后再来阅读下本教程。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>电池热补丁的原理，本质就是热补丁的原理以及电池的字节拆分原理，在此我不再赘述，有兴趣的请自己去百度相关教程。不过涉及到一些这二者协调部分的原理，在这里我有必要解释一下：</p>\n<p>我们知道，在DSDT的电池补丁里，电池的各种变量，存在一个变量的字节位占用问题，如果将变量字节位搞错，将会导致打补丁后的DSDT无法正常显示电池信息。而热补丁本质就是DSDT的延伸，因此，我们在热补丁中动态修补电池字节数据的时候，也必须保留对原有字节位的占用，而不能随意错位。电池的数据一般存储在一个大的OperationRegion块中。懂热补丁的都知道，显然OperationRegion方法是不允许直接注入的。因此，我们通常想到的就是直接将电池设备改名，重新注入数据。这种方法经过本人测试，存在很大问题，其中之一就是数据无法正确注入修改后的电池数据（OperationRegion）到DSDT中，会报错。另外这样书写的热补丁代码量太大，需要处理的引用与方法交叉十分多。</p>\n<p>所幸宪武大神给出了一个折中的方法：新建一个OperationRegion块，在这个新块里动态注入所有的拆分字节数据；同时，对原有的未拆分字节保留空位，从而在保证位移量正确的情况下正确注入并引用新的数据。如此，电池就可以以热补丁的形式注入字节数据并被修改为正确信息。</p>\n<p>当然，这种方法也有其弊端在里面：由于二次调用数据，这样的热补丁执行效率会有点低，但是对于现在的机子而言，这个效率的影响微乎其微。</p>\n<p>基于这样的一个思路，我们接下来就可以开始制作电池的热补丁。</p>\n<h1 id=\"开始制作\"><a href=\"#开始制作\" class=\"headerlink\" title=\"开始制作\"></a>开始制作</h1><h2 id=\"分析补丁\"><a href=\"#分析补丁\" class=\"headerlink\" title=\"分析补丁\"></a>分析补丁</h2><p>在开始制作之前，我们首先就需要对我们的电池DSDT补丁进行分析，来确定哪些数据是我们接下来需要使用到的。比如以潮7000 13寸的电池热补丁来说，是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.</span><br><span class=\"line\">2. </span><br><span class=\"line\">3. #BML0,   16,</span><br><span class=\"line\">4. #BAV0,   16, </span><br><span class=\"line\">5. #BAC0,   16,</span><br><span class=\"line\">6. #BRC0,   16, </span><br><span class=\"line\">7. #BTP0,   16, </span><br><span class=\"line\">8. #BCC0,   16,</span><br><span class=\"line\">9. #FCC0,   16,</span><br><span class=\"line\">10.#BDC0,   16,</span><br><span class=\"line\">11.#BDV0,   16,</span><br><span class=\"line\">12.#BMD0,   16,</span><br><span class=\"line\">13.#MANA,   96,</span><br><span class=\"line\">14.#DENA,   64,</span><br><span class=\"line\">15.#CHEM,   32,</span><br><span class=\"line\">16.#ATE0,   16,</span><br><span class=\"line\">17.#ATF0,   16,</span><br><span class=\"line\">18.#FWIN,   64,</span><br><span class=\"line\">19.#BARC,   128,</span><br><span class=\"line\">20.#SMDA,   256,</span><br><span class=\"line\">21. </span><br><span class=\"line\">22.#BAT0 on H_EC</span><br><span class=\"line\">23.#BAT1 on H_EC</span><br><span class=\"line\">24.#BAT2 on H_EC</span><br><span class=\"line\">25. </span><br><span class=\"line\">26. into device label H_EC code_regex BML0,\\s+16, replace_matched begin ML00,8,ML01,8, end;</span><br><span class=\"line\">27. into device label H_EC code_regex BAV0,\\s+16, replace_matched begin AV00,8,AV01,8, end;</span><br><span class=\"line\">28. into device label H_EC code_regex BAC0,\\s+16, replace_matched begin AC00,8,AC01,8, end;</span><br><span class=\"line\">29. into device label H_EC code_regex BRC0,\\s+16, replace_matched begin RC00,8,RC01,8, end;</span><br><span class=\"line\">30. into device label H_EC code_regex BTP0,\\s+16, replace_matched begin TP00,8,TP01,8, end;</span><br><span class=\"line\">31. into device label H_EC code_regex BCC0,\\s+16, replace_matched begin CC00,8,CC01,8, end;</span><br><span class=\"line\">32. into device label H_EC code_regex FCC0,\\s+16, replace_matched begin FC00,8,FC01,8, end;</span><br><span class=\"line\">33. into device label H_EC code_regex BDC0,\\s+16, replace_matched begin DC00,8,DC01,8, end;</span><br><span class=\"line\">34. into device label H_EC code_regex BDV0,\\s+16, replace_matched begin DV00,8,DV01,8, end;</span><br><span class=\"line\">35. into device label H_EC code_regex BMD0,\\s+16, replace_matched begin MD00,8,MD01,8, end;</span><br><span class=\"line\">36. into device label H_EC code_regex CHEM,\\s+32, replace_matched begin HEM0,8,HEM1,8,HEM2,8,HEM3,8, end;</span><br><span class=\"line\">37. into device label H_EC code_regex ATE0,\\s+16, replace_matched begin TE00,8,TE01,8, end;</span><br><span class=\"line\">38. into device label H_EC code_regex ATF0,\\s+16, replace_matched begin TF00,8,TF01,8, end;</span><br><span class=\"line\">39. </span><br><span class=\"line\">40. into method label _BIF code_regex \\(BML0, replaceall_matched begin (B1B2(ML00,ML01), end;</span><br><span class=\"line\">41. </span><br><span class=\"line\">42. into method label _BST code_regex \\(BML0, replaceall_matched begin (B1B2(ML00,ML01), end;</span><br><span class=\"line\">43. </span><br><span class=\"line\">44. into method label _BST code_regex BAV0\\), replaceall_matched begin B1B2(AV00,AV01)), end;</span><br><span class=\"line\">45. </span><br><span class=\"line\">46. into method label _BST code_regex \\(BAV0, replaceall_matched begin (B1B2(AV00,AV01), end;</span><br><span class=\"line\">47. </span><br><span class=\"line\">48. into method label GSBI code_regex \\(BAV0, replaceall_matched begin (B1B2(AV00,AV01), end;</span><br><span class=\"line\">49. </span><br><span class=\"line\">50. into method label _BST code_regex \\(BAC0\\), replaceall_matched begin (B1B2(AC00,AC01)), end;</span><br><span class=\"line\">51. </span><br><span class=\"line\">52. into method label _BST code_regex \\(BAC0, replaceall_matched begin (B1B2(AC00,AC01), end;</span><br><span class=\"line\">53. </span><br><span class=\"line\">54. into method label _BST code_regex \\(BRC0, replaceall_matched begin (B1B2(RC00,RC01), end;</span><br><span class=\"line\">55. </span><br><span class=\"line\">56. into method label GSBI code_regex \\(BRC0, replaceall_matched begin (B1B2(RC00,RC01), end;</span><br><span class=\"line\">57. </span><br><span class=\"line\">58. into method label GSBI code_regex \\(BTP0, replaceall_matched begin (B1B2(TP00,TP01), end;</span><br><span class=\"line\">59. </span><br><span class=\"line\">60. into method label GSBI code_regex \\(BCC0, replaceall_matched begin (B1B2(CC00,CC01), end;</span><br><span class=\"line\">61. </span><br><span class=\"line\">62. into method label _BIF code_regex \\(FCC0, replaceall_matched begin (B1B2(FC00,FC01), end;</span><br><span class=\"line\">63. </span><br><span class=\"line\">64. into method label _BIF code_regex \\(FCC0\\) replaceall_matched begin (B1B2(FC00,FC01)) end;</span><br><span class=\"line\">65. </span><br><span class=\"line\">66. into method label GSBI code_regex \\(FCC0, replaceall_matched begin (B1B2(FC00,FC01), end;</span><br><span class=\"line\">67. </span><br><span class=\"line\">68. into method label _BIF code_regex \\(BDC0, replaceall_matched begin (B1B2(DC00,DC01), end;</span><br><span class=\"line\">69. </span><br><span class=\"line\">70. into method label GSBI code_regex \\(BDC0, replaceall_matched begin (B1B2(DC00,DC01), end;</span><br><span class=\"line\">71. </span><br><span class=\"line\">72. into method label _BIF code_regex \\(BDV0, replaceall_matched begin (B1B2(DV00,DV01), end;</span><br><span class=\"line\">73. </span><br><span class=\"line\">74. into method label GSBI code_regex \\(BDV0, replaceall_matched begin (B1B2(DV00,DV01), end;</span><br><span class=\"line\">75. </span><br><span class=\"line\">76. into method label GSBI code_regex \\(BMD0, replaceall_matched begin (B1B2(MD00,MD01), end;</span><br><span class=\"line\">77. </span><br><span class=\"line\">78. into method label GSBI code_regex \\(MANA, replaceall_matched begin (\\\\_SB.PCI0.LPCB.H_EC.RECB(0x30,96), end;</span><br><span class=\"line\">79. </span><br><span class=\"line\">80. into method label GSBI code_regex \\(DENA, replaceall_matched begin (\\\\_SB.PCI0.LPCB.H_EC.RECB(0x8C,64), end;</span><br><span class=\"line\">81. </span><br><span class=\"line\">82. into method label GSBI code_regex \\(CHEM, replaceall_matched begin (B1B4(HEM0,HEM1,HEM2,HEM3), end;</span><br><span class=\"line\">83. </span><br><span class=\"line\">84. into method label GSBI code_regex \\(ATE0, replaceall_matched begin (B1B2(TE00,TE01), end;</span><br><span class=\"line\">85. </span><br><span class=\"line\">86. into method label SMTF code_regex \\(ATF0, replaceall_matched begin (B1B2(TF00,TF01), end;</span><br><span class=\"line\">87. </span><br><span class=\"line\">88. into method label GSBI code_regex \\(ATF0, replaceall_matched begin (B1B2(TF00,TF01), end;</span><br><span class=\"line\">89. </span><br><span class=\"line\">90. into method label GSBI code_regex \\(FWIN, replaceall_matched begin (\\\\_SB.PCI0.LPCB.H_EC.RECB(0xA0,64), end;</span><br><span class=\"line\">91. </span><br><span class=\"line\">92. into method label MHIF code_regex \\(FWIN, replaceall_matched begin (\\\\_SB.PCI0.LPCB.H_EC.RECB(0xA0,64), end;</span><br><span class=\"line\">93. </span><br><span class=\"line\">94. into method label GSBI code_regex \\(BARC, replaceall_matched begin (\\\\_SB.PCI0.LPCB.H_EC.RECB(0xA8,128), end;</span><br><span class=\"line\">95. </span><br><span class=\"line\">96. into method label MHPF code_regex Store\\s\\(FB4,\\sSMDA\\) replaceall_matched begin \\\\_SB.PCI0.LPCB.H_EC.WECB(0x04,256,FB4) end;</span><br><span class=\"line\">97. </span><br><span class=\"line\">98. into method label MHPF code_regex \\(SMDA, replaceall_matched begin (\\\\_SB.PCI0.LPCB.H_EC.RECB(0x04,256), end;</span><br><span class=\"line\">99. </span><br><span class=\"line\">100. into device label BAT1 parent_label H_EC remove_entry;</span><br><span class=\"line\">101. into device label BAT2 parent_label H_EC remove_entry;</span><br><span class=\"line\">102. </span><br><span class=\"line\">103. into method label _STA parent_label BAT0 replace_content begin Return (0x1F) end;</span><br><span class=\"line\">104. </span><br><span class=\"line\">105. \\#B1B2</span><br><span class=\"line\">106. \\#B1B3</span><br><span class=\"line\">107. \\#B1B4</span><br><span class=\"line\">108. \\#RECB</span><br><span class=\"line\">109. \\#WECB</span><br><span class=\"line\">110. </span><br><span class=\"line\">111. into method label B1B2 remove_entry;</span><br><span class=\"line\">112. into definitionblock code_regex . insert</span><br><span class=\"line\">113. begin</span><br><span class=\"line\">114. Method (B1B2, 2, NotSerialized)\\n</span><br><span class=\"line\">115. &#123;\\n</span><br><span class=\"line\">116. Return(Or(Arg0, ShiftLeft(Arg1, 8)))\\n</span><br><span class=\"line\">117. &#125;\\n</span><br><span class=\"line\">118. end;</span><br><span class=\"line\">119. </span><br><span class=\"line\">120. \\#For 24 bit registers</span><br><span class=\"line\">121. into method label B1B3 remove_entry;</span><br><span class=\"line\">122. into definitionblock code_regex . insert</span><br><span class=\"line\">123. begin</span><br><span class=\"line\">124. Method (B1B3, 3, NotSerialized)\\n</span><br><span class=\"line\">125. &#123;\\n</span><br><span class=\"line\">126.     Store(Arg2, Local0)\\n</span><br><span class=\"line\">127.     Or(Arg1, ShiftLeft(Local0, 8), Local0)\\n</span><br><span class=\"line\">128.     Or(Arg0, ShiftLeft(Local0, 8), Local0)\\n</span><br><span class=\"line\">129.     Return(Local0)\\n</span><br><span class=\"line\">130. &#125;\\n</span><br><span class=\"line\">131. end;</span><br><span class=\"line\">132. </span><br><span class=\"line\">133. into method label B1B4 remove_entry;</span><br><span class=\"line\">134. into definitionblock code_regex . insert</span><br><span class=\"line\">135. begin</span><br><span class=\"line\">136. Method (B1B4, 4, NotSerialized)\\n</span><br><span class=\"line\">137. &#123;\\n</span><br><span class=\"line\">138.     Store(Arg3, Local0)\\n</span><br><span class=\"line\">139.     Or(Arg2, ShiftLeft(Local0, 8), Local0)\\n</span><br><span class=\"line\">140.     Or(Arg1, ShiftLeft(Local0, 8), Local0)\\n</span><br><span class=\"line\">141.     Or(Arg0, ShiftLeft(Local0, 8), Local0)\\n</span><br><span class=\"line\">142.     Return(Local0)\\n</span><br><span class=\"line\">143. &#125;\\n</span><br><span class=\"line\">144. end;</span><br><span class=\"line\">145. </span><br><span class=\"line\">146. \\# utility methods to read/write buffers from/to EC</span><br><span class=\"line\">147. into method label RE1B parent_label H_EC remove_entry;</span><br><span class=\"line\">148. into method label RECB parent_label H_EC remove_entry;</span><br><span class=\"line\">149. into device label H_EC insert</span><br><span class=\"line\">150. begin</span><br><span class=\"line\">151. Method (RE1B, 1, NotSerialized)\\n</span><br><span class=\"line\">152. &#123;\\n</span><br><span class=\"line\">153.     OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n</span><br><span class=\"line\">154.     Field(ERAM, ByteAcc, NoLock, Preserve) &#123; BYTE, 8 &#125;\\n</span><br><span class=\"line\">155.     Return(BYTE)\\n</span><br><span class=\"line\">156. &#125;\\n</span><br><span class=\"line\">157. Method (RECB, 2, Serialized)\\n</span><br><span class=\"line\">158. // Arg0 - offset in bytes from zero-based EC\\n</span><br><span class=\"line\">159. // Arg1 - size of buffer in bits\\n</span><br><span class=\"line\">160. &#123;\\n</span><br><span class=\"line\">161.     ShiftRight(Arg1, 3, Arg1)\\n</span><br><span class=\"line\">162.     Name(TEMP, Buffer(Arg1) &#123; &#125;)\\n</span><br><span class=\"line\">163.     Add(Arg0, Arg1, Arg1)\\n</span><br><span class=\"line\">164.     Store(0, Local0)\\n</span><br><span class=\"line\">165.     While (LLess(Arg0, Arg1))\\n</span><br><span class=\"line\">166.     &#123;\\n</span><br><span class=\"line\">167.         Store(RE1B(Arg0), Index(TEMP, Local0))\\n</span><br><span class=\"line\">168.         Increment(Arg0)\\n</span><br><span class=\"line\">169.         Increment(Local0)\\n</span><br><span class=\"line\">170.     &#125;\\n</span><br><span class=\"line\">171.     Return(TEMP)\\n</span><br><span class=\"line\">172. &#125;\\n</span><br><span class=\"line\">173. end;</span><br><span class=\"line\">174. </span><br><span class=\"line\">175. into method label WE1B parent_label H_EC remove_entry;</span><br><span class=\"line\">176. into method label WECB parent_label H_EC remove_entry;</span><br><span class=\"line\">177. into device label H_EC insert</span><br><span class=\"line\">178. begin</span><br><span class=\"line\">179. Method (WE1B, 2, NotSerialized)\\n</span><br><span class=\"line\">180. &#123;\\n</span><br><span class=\"line\">181.     OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n</span><br><span class=\"line\">182.     Field(ERAM, ByteAcc, NoLock, Preserve) &#123; BYTE, 8 &#125;\\n</span><br><span class=\"line\">183.     Store(Arg1, BYTE)\\n</span><br><span class=\"line\">184. &#125;\\n</span><br><span class=\"line\">185. Method (WECB, 3, Serialized)\\n</span><br><span class=\"line\">186. // Arg0 - offset in bytes from zero-based EC\\n</span><br><span class=\"line\">187. // Arg1 - size of buffer in bits\\n</span><br><span class=\"line\">188. // Arg2 - value to write\\n</span><br><span class=\"line\">189. &#123;\\n</span><br><span class=\"line\">190.     ShiftRight(Arg1, 3, Arg1)\\n</span><br><span class=\"line\">191.     Name(TEMP, Buffer(Arg1) &#123; &#125;)\\n</span><br><span class=\"line\">192.     Store(Arg2, TEMP)\\n</span><br><span class=\"line\">193.     Add(Arg0, Arg1, Arg1)\\n</span><br><span class=\"line\">194.     Store(0, Local0)\\n</span><br><span class=\"line\">195.     While (LLess(Arg0, Arg1))\\n</span><br><span class=\"line\">196.     &#123;\\n</span><br><span class=\"line\">197.         WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\\n</span><br><span class=\"line\">198.         Increment(Arg0)\\n</span><br><span class=\"line\">199.         Increment(Local0)\\n</span><br><span class=\"line\">200.     &#125;\\n</span><br><span class=\"line\">201. &#125;\\n</span><br><span class=\"line\">202. end;</span><br><span class=\"line\">203. </span><br><span class=\"line\">204. \\# utility methods to read/write buffers from/to EC</span><br><span class=\"line\">205. into method label RE1B parent_label EC remove_entry;</span><br><span class=\"line\">206. into method label RECB parent_label EC remove_entry;</span><br><span class=\"line\">207. into device label EC insert</span><br><span class=\"line\">208. begin</span><br><span class=\"line\">209. Method (RE1B, 1, NotSerialized)\\n</span><br><span class=\"line\">210. &#123;\\n</span><br><span class=\"line\">211.     OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n</span><br><span class=\"line\">212.     Field(ERAM, ByteAcc, NoLock, Preserve) &#123; BYTE, 8 &#125;\\n</span><br><span class=\"line\">213.     Return(BYTE)\\n</span><br><span class=\"line\">214. &#125;\\n</span><br><span class=\"line\">215. Method (RECB, 2, Serialized)\\n</span><br><span class=\"line\">216. // Arg0 - offset in bytes from zero-based EC\\n</span><br><span class=\"line\">217. // Arg1 - size of buffer in bits\\n</span><br><span class=\"line\">218. &#123;\\n</span><br><span class=\"line\">219.     ShiftRight(Arg1, 3, Arg1)\\n</span><br><span class=\"line\">220.     Name(TEMP, Buffer(Arg1) &#123; &#125;)\\n</span><br><span class=\"line\">221.     Add(Arg0, Arg1, Arg1)\\n</span><br><span class=\"line\">222.     Store(0, Local0)\\n</span><br><span class=\"line\">223.     While (LLess(Arg0, Arg1))\\n</span><br><span class=\"line\">224.     &#123;\\n</span><br><span class=\"line\">225.         Store(RE1B(Arg0), Index(TEMP, Local0))\\n</span><br><span class=\"line\">226.         Increment(Arg0)\\n</span><br><span class=\"line\">227.         Increment(Local0)\\n</span><br><span class=\"line\">228.     &#125;\\n</span><br><span class=\"line\">229.     Return(TEMP)\\n</span><br><span class=\"line\">230. &#125;\\n</span><br><span class=\"line\">231. end;</span><br><span class=\"line\">232. </span><br><span class=\"line\">233. into method label WE1B parent_label EC remove_entry;</span><br><span class=\"line\">234. into method label WECB parent_label EC remove_entry;</span><br><span class=\"line\">235. into device label EC insert</span><br><span class=\"line\">236. begin</span><br><span class=\"line\">237. Method (WE1B, 2, NotSerialized)\\n</span><br><span class=\"line\">238. &#123;\\n</span><br><span class=\"line\">239.     OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n</span><br><span class=\"line\">240.     Field(ERAM, ByteAcc, NoLock, Preserve) &#123; BYTE, 8 &#125;\\n</span><br><span class=\"line\">241.     Store(Arg1, BYTE)\\n</span><br><span class=\"line\">242. &#125;\\n</span><br><span class=\"line\">243. Method (WECB, 3, Serialized)\\n</span><br><span class=\"line\">244. // Arg0 - offset in bytes from zero-based EC\\n</span><br><span class=\"line\">245. // Arg1 - size of buffer in bits\\n</span><br><span class=\"line\">246. // Arg2 - value to write\\n</span><br><span class=\"line\">247. &#123;\\n</span><br><span class=\"line\">248.     ShiftRight(Arg1, 3, Arg1)\\n</span><br><span class=\"line\">249.     Name(TEMP, Buffer(Arg1) &#123; &#125;)\\n</span><br><span class=\"line\">250.     Store(Arg2, TEMP)\\n</span><br><span class=\"line\">251.     Add(Arg0, Arg1, Arg1)\\n</span><br><span class=\"line\">252.     Store(0, Local0)\\n</span><br><span class=\"line\">253.     While (LLess(Arg0, Arg1))\\n</span><br><span class=\"line\">254.     &#123;\\n</span><br><span class=\"line\">255.         WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\\n</span><br><span class=\"line\">256.         Increment(Arg0)\\n</span><br><span class=\"line\">257.         Increment(Local0)\\n</span><br><span class=\"line\">258.     &#125;\\n</span><br><span class=\"line\">259. &#125;\\n</span><br><span class=\"line\">260. end;</span><br><span class=\"line\">261. </span><br><span class=\"line\">262. \\# utility methods to read/write buffers from/to EC</span><br><span class=\"line\">263. into method label RE1B parent_label EC0 remove_entry;</span><br><span class=\"line\">264. into method label RECB parent_label EC0 remove_entry;</span><br><span class=\"line\">265. into device label EC0 insert</span><br><span class=\"line\">266. begin</span><br><span class=\"line\">267. Method (RE1B, 1, NotSerialized)\\n</span><br><span class=\"line\">268. &#123;\\n</span><br><span class=\"line\">269.     OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n</span><br><span class=\"line\">270.     Field(ERAM, ByteAcc, NoLock, Preserve) &#123; BYTE, 8 &#125;\\n</span><br><span class=\"line\">271.     Return(BYTE)\\n</span><br><span class=\"line\">272. &#125;\\n</span><br><span class=\"line\">273. Method (RECB, 2, Serialized)\\n</span><br><span class=\"line\">274. // Arg0 - offset in bytes from zero-based EC\\n</span><br><span class=\"line\">275. // Arg1 - size of buffer in bits\\n</span><br><span class=\"line\">276. &#123;\\n</span><br><span class=\"line\">277.     ShiftRight(Arg1, 3, Arg1)\\n</span><br><span class=\"line\">278.     Name(TEMP, Buffer(Arg1) &#123; &#125;)\\n</span><br><span class=\"line\">279.     Add(Arg0, Arg1, Arg1)\\n</span><br><span class=\"line\">280.     Store(0, Local0)\\n</span><br><span class=\"line\">281.     While (LLess(Arg0, Arg1))\\n</span><br><span class=\"line\">282.     &#123;\\n</span><br><span class=\"line\">283.         Store(RE1B(Arg0), Index(TEMP, Local0))\\n</span><br><span class=\"line\">284.         Increment(Arg0)\\n</span><br><span class=\"line\">285.         Increment(Local0)\\n</span><br><span class=\"line\">286.     &#125;\\n</span><br><span class=\"line\">287.     Return(TEMP)\\n</span><br><span class=\"line\">288. &#125;\\n</span><br><span class=\"line\">289. end;</span><br><span class=\"line\">290. </span><br><span class=\"line\">291. into method label WE1B parent_label EC0 remove_entry;</span><br><span class=\"line\">292. into method label WECB parent_label EC0 remove_entry;</span><br><span class=\"line\">293. into device label EC0 insert</span><br><span class=\"line\">294. begin</span><br><span class=\"line\">295. Method (WE1B, 2, NotSerialized)\\n</span><br><span class=\"line\">296. &#123;\\n</span><br><span class=\"line\">297.     OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n</span><br><span class=\"line\">298.     Field(ERAM, ByteAcc, NoLock, Preserve) &#123; BYTE, 8 &#125;\\n</span><br><span class=\"line\">299.     Store(Arg1, BYTE)\\n</span><br><span class=\"line\">300. &#125;\\n</span><br><span class=\"line\">301. Method (WECB, 3, Serialized)\\n</span><br><span class=\"line\">302. // Arg0 - offset in bytes from zero-based EC\\n</span><br><span class=\"line\">303. // Arg1 - size of buffer in bits\\n</span><br><span class=\"line\">304. // Arg2 - value to write\\n</span><br><span class=\"line\">305. &#123;\\n</span><br><span class=\"line\">306.     ShiftRight(Arg1, 3, Arg1)\\n</span><br><span class=\"line\">307.     Name(TEMP, Buffer(Arg1) &#123; &#125;)\\n</span><br><span class=\"line\">308.     Store(Arg2, TEMP)\\n</span><br><span class=\"line\">309.     Add(Arg0, Arg1, Arg1)\\n</span><br><span class=\"line\">310.     Store(0, Local0)\\n</span><br><span class=\"line\">311.     While (LLess(Arg0, Arg1))\\n</span><br><span class=\"line\">312.     &#123;\\n</span><br><span class=\"line\">313.         WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\\n</span><br><span class=\"line\">314.         Increment(Arg0)\\n</span><br><span class=\"line\">315.         Increment(Local0)\\n</span><br><span class=\"line\">316.     &#125;\\n</span><br><span class=\"line\">317. &#125;\\n</span><br><span class=\"line\">318. end;</span><br><span class=\"line\">319. </span><br><span class=\"line\">320.#Fix Battery 0% Status</span><br><span class=\"line\">321.#Maintained by: RehabMan for: Laptop Patches</span><br><span class=\"line\">322.#system_Mutex.txt</span><br><span class=\"line\">323. </span><br><span class=\"line\">324.#</span><br><span class=\"line\">325.# Some DSDTs use Mutex objects with non-zero a SyncLevel.  Evidently,</span><br><span class=\"line\">326.# OS X has some difficulty with this part of the ACPI spec, either that </span><br><span class=\"line\">327.# or the DSDTs are, in fact, codec incorrectly and Windows is ignoring </span><br><span class=\"line\">328.# it.</span><br><span class=\"line\">329. </span><br><span class=\"line\">330.# The common result of a non-zero SyncLevel is failure of methods at the</span><br><span class=\"line\">331.# point of Acquire on the mutext in question.  This can result in strange</span><br><span class=\"line\">332.# behavior, failed battery status, or other issues.</span><br><span class=\"line\">333.#</span><br><span class=\"line\">334. # This patch corrects all Mutex objects declared with a non-zero</span><br><span class=\"line\">335. # SyncLevel to use zero.</span><br><span class=\"line\">336. #</span><br><span class=\"line\">337. </span><br><span class=\"line\">338. # 2x as there is some sort of MaciASL bug...</span><br><span class=\"line\">339. # (code_regex_not seems broken)</span><br><span class=\"line\">340. #into_all all code_regex_not Mutex\\s+\\([^,]*,\\s+0x00\\) code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">341. #into_all all code_regex_not Mutex\\s+\\([^,]*,\\s+0x00\\) code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">342. </span><br><span class=\"line\">343. # 10x as workaround for MaciASL bug...</span><br><span class=\"line\">344. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">345. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">346. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">347. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">348. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">349. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">350. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">351. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">352. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">353. into_all all code_regex Mutex\\s+\\(([^,]*),\\s+[^)]*\\) replaceall_matched begin Mutex(%1, 0) end;</span><br><span class=\"line\">354. </span><br><span class=\"line\">355. #Logic bug with charging/discharging status (AC adapter detection)</span><br><span class=\"line\">356. #Some DSDTs suffer from a logic bug where at the point of 100% capacity (fully charged battery), an incorrect #status is returned from _BST. This mostly affects certain ASUS laptops, but also a few others.</span><br><span class=\"line\">357. #Here is a patch to correct this problem:</span><br><span class=\"line\">358. into method label FBST code_regex If\\s\\(CHGS\\s\\(Zero\\)\\)[\\s]+\\&#123;[\\s]+Store\\s\\(0x02,\\sLocal0\\)[\\s]+\\&#125;[\\s]+Else[\\s]+\\&#123;[\\s]+Store\\s\\(One,\\sLocal0\\)[\\s]+\\&#125; replaceall_matched begin</span><br><span class=\"line\">359. If (CHGS (Zero))\\n</span><br><span class=\"line\">360. &#123;\\n</span><br><span class=\"line\">361.      Store (0x02, Local0)\\n</span><br><span class=\"line\">362. &#125;\\n</span><br><span class=\"line\">363. Else\\n</span><br><span class=\"line\">364. &#123;\\n</span><br><span class=\"line\">365.      Store (Zero, Local0)\\n</span><br><span class=\"line\">366. &#125;</span><br><span class=\"line\">367. end;</span><br><span class=\"line\">368. </span><br><span class=\"line\">369. #Fix HP OMEN Laptop Baterry to enabled percentage and discharge time</span><br><span class=\"line\">370. into method label SMWR code_regex If\\s\\(LNot\\s\\(ECOK\\)\\)\\s+\\&#123;\\s+Return\\s\\(0xFF\\)\\s+\\&#125; replaceall_matched begin</span><br><span class=\"line\">371. If (LEqual (ECOK, One))\\n</span><br><span class=\"line\">372. &#123;\\n</span><br><span class=\"line\">373.      Return (0xFF)\\n</span><br><span class=\"line\">374. &#125;\\n</span><br><span class=\"line\">375. end;</span><br><span class=\"line\">376. </span><br><span class=\"line\">377. #Fix Hasee YOUYA Laptop Baterry to enabled percentage and discharge time</span><br><span class=\"line\">378. into method label SMWR code_regex If\\s\\(LNot\\s\\(ECON\\)\\)\\s+\\&#123;\\s+Return\\s\\(0xFF\\)\\s+\\&#125; replaceall_matched begin</span><br><span class=\"line\">379. If (LEqual (ECON, One))\\n</span><br><span class=\"line\">380. &#123;\\n</span><br><span class=\"line\">381.      Return (0xFF)\\n</span><br><span class=\"line\">382. &#125;\\n</span><br><span class=\"line\">383. end;</span><br><span class=\"line\">384. </span><br><span class=\"line\">385. #into definitionblock code_regex . insert</span><br><span class=\"line\">386. #begin</span><br><span class=\"line\">387. #External (_SB.PCI0.BATC, DeviceObj)</span><br><span class=\"line\">388. #end</span><br></pre></td></tr></table></figure>\n\n<p>看起来这个补丁代码确实很复杂，但是仔细分析下，我们修改这个热补丁，无非需要以下这些数据：</p>\n<ul>\n<li><strong>电池的设备位置</strong></li>\n<li><strong>额外添加的方法</strong></li>\n<li><strong>拆分的字节数据</strong></li>\n<li><strong>引用修改字节的方法(Method)</strong></li>\n</ul>\n<p>通过对于IOReg等的分析，我们得知电池设备为H_EC.BAT0；而对此字节补丁进行分析，我们发现，它实际上修改了这些字节数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BML0 → B1B2 (ML00, ML01)</span><br><span class=\"line\">BAV0 → B1B2 (AV00, AV01)</span><br><span class=\"line\">BAC0 → B1B2 (AC00, AC01)</span><br><span class=\"line\">BRC0 → B1B2 (RC00 ,RC01)</span><br><span class=\"line\">BTP0 → B1B2 (TP00, TP01)</span><br><span class=\"line\">BCC0 → B1B2 (CC00, CC01)</span><br><span class=\"line\">FCC0 → B1B2 (FC00, FC01)</span><br><span class=\"line\">BDC0 → B1B2 (DC00, DC01)</span><br><span class=\"line\">BDV0 → B1B2 (DV00, DV01)</span><br><span class=\"line\">BMD0 → B1B2 (MD00, MD01)</span><br><span class=\"line\">MANA → RECB (0x30, 0x60)</span><br><span class=\"line\">DENA → RECB (0x8C, 0x40)</span><br><span class=\"line\">CHEM → B1B4 (HEM0, HEM1, HEM2, HEM3)</span><br><span class=\"line\">ATE0 → B1B2 (TE00, TE01)</span><br></pre></td></tr></table></figure>\n\n<p>这些字节数据全部位于H_EC下的ECF2这个OperationRegion中。随后，对这些拆分的字节添加的语句进行分析，我们也找到了我们需要添加的额外方法：<strong>RECB、RE1B、B1B2、B1B4</strong></p>\n<p>接下来 ，我们前去阅读潮7000 13修改好电池后的DSDT（样本点击这里下载），通过反复查找对比我们前面找到的额外方法，我们可以发现，这些方法在以下这些DSDT方法中出现（也即<strong>引用修改字节的方法</strong>）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_SB.PCI0.LPCB.H_EC.VPC0下：</span><br><span class=\"line\"></span><br><span class=\"line\">MHIF、SMTF、GSBI</span><br><span class=\"line\"></span><br><span class=\"line\">_SB.PCI0.LPCB.H_EC.BAT0下：</span><br><span class=\"line\"></span><br><span class=\"line\">_BIF、_BST</span><br></pre></td></tr></table></figure>\n\n<p>由此，我们确定了我们需要修改的所有地方，接下来我们就需要把这些修改注入到我们的热补丁中。</p>\n<h2 id=\"数据插入\"><a href=\"#数据插入\" class=\"headerlink\" title=\"数据插入\"></a>数据插入</h2><p>接下来，我们就需要进行插入操作了。打开Maciasl软件(相关下载可在我博客的资源页面获取)，新建一个文件，插入以下这段代码，使其声明为一个热补丁文件；然后保存为DSL文本文件(文件名随意起，只要保证以”SSDT-“开头就好了)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefinitionBlock (&quot;&quot;, &quot;SSDT&quot;, 2, &quot;hack&quot;, &quot;xxxx&quot;, 0x00000000)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的XXXX为你前面找到的电池设备名称，比如我的是BAT0，那这里就写为BAT0。</p>\n<p>然后，复制DSDT中的电池字节OperationRegion到这个热补丁中，就像这样：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E5%A4%8D%E5%88%B6ecf2.png\" class=\"\" alt=\"my post image\">\n\n<p>然后，我们将<strong>额外添加的方法</strong>与**引用修改字节的方法(Method)**同时插入到这个DSDT里面：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E6%8F%92%E5%85%A5%E6%96%B9%E6%B3%95.png\" class=\"\" alt=\"my post image\">\n\n<p><strong>注意：在插入的时候，在同一个设备下面的方法一定要放到一块！</strong>比如<code>_BIF</code>与<code>_BST</code>同为<code>BAT0</code>设备下面的方法，在插入时就要放到一块。这样做的目的，是为了后面修改时方便修改，减少代码的书写以及使代码层次分明。</p>\n<h2 id=\"添加位置代码\"><a href=\"#添加位置代码\" class=\"headerlink\" title=\"添加位置代码\"></a>添加位置代码</h2><p>到这里，我们并未完全完成代码的插入。我们需要BIOS知道我们插入的这些方法都是动态注入修补到哪些位置的方法，这需要我们添加位置代码。</p>\n<p>比如，比如<code>_BIF</code>与<code>_BST</code>同为<code>BAT0</code>设备下面的方法，而<code>BAT0</code>位于<code>_SB.PCI0.LPCB.H_EC</code></p>\n<p>。因此，我们需要在  <code>Method (_BIF, 0, NotSerialized)</code>前插入<code>Scope</code>位置代码，在<code>_BST</code>方法结束位置插入结束代码”}”。它看起来的效果应该像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scope (_SB.PCI0.LPCB.H_EC.BAT0)</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">     Method (_BIF, 0, NotSerialized) </span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     Method (_BST, 0, NotSerialized) </span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样地，对于<code>ECF2</code>这个OperationRegion，它的位置在<code>_SB.PCI0.LPCB.H_EC</code>，因此，应该像这样在<code>ECF2</code>下插入位置代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scope (_SB.PCI0.LPCB.H_EC)</span><br><span class=\"line\">&#123;        </span><br><span class=\"line\">\t OperationRegion (ECF2, EmbeddedControl, Zero, 0xFF)</span><br><span class=\"line\">            Field (ECF2, ByteAcc, Lock, Preserve)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            \t\t\t...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>而对于RECB、RE1B、B1B2、B1B4这三个方法，由于其本身就在根设备下，因此不需要再额外添加位置代码，保留原有层级结构即可。</p>\n<p>对所有我们刚才插入进来的代码进行位置代码插入，最终修改后，我们可以在左侧的窗格看到类似的层级结构：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E5%B1%82%E7%BA%A7.png\" class=\"\" alt=\"my post image\">\n\n<p>在图里我们看到，所有方法，除了OperationRegion外，在层层展开下均能看见，并且位置正确，层级结构不错位；同时进行一下编译，也看不到任何与”}”有关的错误：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E6%97%A0%E5%B1%82%E7%BA%A7%E9%94%99%E8%AF%AF.png\" class=\"\" alt=\"my post image\">\n\n<h2 id=\"添加外部引用\"><a href=\"#添加外部引用\" class=\"headerlink\" title=\"添加外部引用\"></a>添加外部引用</h2><p>如果以上步骤皆操作正确，那么接下来你所看到的错误，将全部与添加外部引用有关，就像上图你看到的那样。这一部分的步骤主要就是添加外部引用。</p>\n<p>首先注意下，我们的位置代码那里，有三个设备被引用，分别是<code>_SB.PCI0.LPCB.H_EC</code>、<code>_SB.PCI0.LPCB.H_EC.BAT0</code>和<code>_SB.PCI0.LPCB.H_EC.VPC0</code>。由于它们以Scope形式引用，必须要有设备声明，因此，我们需要添加这三个设备的外部引用到第2行下面，就像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefinitionBlock (&quot;&quot;, &quot;SSDT&quot;, 2, &quot;hack&quot;, &quot;BAT0&quot;, 0x00000000)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    External (_SB_.PCI0.LPCB.H_EC, DeviceObj)</span><br><span class=\"line\">    External (_SB_.PCI0.LPCB.H_EC.BAT0, DeviceObj)</span><br><span class=\"line\">    External (_SB_.PCI0.LPCB.H_EC.VPC0, DeviceObj)</span><br><span class=\"line\"></span><br><span class=\"line\">    Scope (_SB.PCI0.LPCB.H_EC)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t\t\t...</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>DeviceObj</code>表示这是一个ACPI设备。</p>\n<p>编辑好后，我们再次编译，可以看到相关的报错全都消失了：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E7%BC%96%E8%AF%911.png\" class=\"\" alt=\"my post image\">\n\n<p>接下来，我们根据报错，继续在DSDT里搜索其他的报错代码，并添加相关引用。</p>\n<p>比如对于<code>BASC</code>，我们在DSDT搜索：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/basc.png\" class=\"\" alt=\"my post image\">\n\n<p>可以看到，这是<code>BAT0</code>下的一个<code>Name</code>变量，对应<code>IntObj</code>，添加外部引用如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefinitionBlock (&quot;&quot;, &quot;SSDT&quot;, 2, &quot;hack&quot;, &quot;BAT0&quot;, 0x00000000)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    External (_SB_.PCI0.LPCB.H_EC, DeviceObj)</span><br><span class=\"line\">    External (_SB_.PCI0.LPCB.H_EC.BAT0, DeviceObj)</span><br><span class=\"line\">    External (_SB_.PCI0.LPCB.H_EC.VPC0, DeviceObj)</span><br><span class=\"line\">\t\tExternal (_SB_.PCI0.LPCB.H_EC.BAT0.BASC, IntObj) //这是插入的代码</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    Scope (_SB.PCI0.LPCB.H_EC)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t\t\t...</span><br></pre></td></tr></table></figure>\n\n<p>再次编译一下，会发现所有与<code>BASC</code>相关的报错全部消失：</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E7%BC%96%E8%AF%912.png\" class=\"\" alt=\"my post image\">\n\n<p>又比如，<code>_SB.PCI0.LPCB.H_EC</code>下的<code>ECMT</code>是<code>Mutex</code>变量，则对应<code>MutexObj</code>，添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">External (_SB_.PCI0.LPCB.H_EC.ECMT, MutexObj)</span><br></pre></td></tr></table></figure>\n\n<p><code>B1ST</code>则是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">External (_SB_.PCI0.LPCB.H_EC.B1ST, FieldUnitObj)</span><br></pre></td></tr></table></figure>\n\n<p><code>MAMW</code>则是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">External (_SB_.PCI0.LPCB.H_EC.MAMW, MethodObj)</span><br></pre></td></tr></table></figure>\n\n<p>……</p>\n<p>通过这一系列外部引用添加，当你最后编译发现不再报错时，外部引用的添加就算结束。</p>\n<img src=\"/2019/05/02/Battery%20Hotpatch%20Make/%E6%97%A0%E9%94%99.png\" class=\"\" alt=\"my post image\"> \n\n<h2 id=\"重命名-x2F-清空字节\"><a href=\"#重命名-x2F-清空字节\" class=\"headerlink\" title=\"重命名&#x2F;清空字节\"></a>重命名&#x2F;清空字节</h2><p>在上面的步骤完成之后，我们实际已经得到了一个基本成型的热补丁，但是这个热补丁到这还尚未修改完成，我们仍然需要两步来完成这个热补丁的修改。</p>\n<p>首先，我们要把<code>ECF2</code>这个字节存放区域更名为一个与原来不一样的名字，比如<code>ECFX</code>。利用查找替换功能，我们可以很轻松完成这个步骤。</p>\n<p>接下来，我们需要把所有不拆分的字节数据段名字去掉，只保留空位。以我的为例，它就像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scope (_SB.PCI0.LPCB.H_EC)</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">        OperationRegion (ECFX, EmbeddedControl, Zero, 0xFF)</span><br><span class=\"line\">        Field (ECFX, ByteAcc, Lock, Preserve)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Offset (0x0E), </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            ,   16,</span><br><span class=\"line\">            ML00,   8, </span><br><span class=\"line\">            ML01,   8, </span><br><span class=\"line\">            ,   16,</span><br><span class=\"line\">            AV00,   8, </span><br><span class=\"line\">            AV01,   8, </span><br><span class=\"line\">            AC00,   8, </span><br><span class=\"line\">            AC01,   8, </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            Offset (0x1C), </span><br><span class=\"line\">            RC00,   8, </span><br><span class=\"line\">            RC01,   8, </span><br><span class=\"line\">            TP00,   8, </span><br><span class=\"line\">            TP01,   8, </span><br><span class=\"line\">            CC00,   8, </span><br><span class=\"line\">            CC01,   8, </span><br><span class=\"line\">            ,   16, </span><br><span class=\"line\">            ,   16,</span><br><span class=\"line\">            FC00,   8, </span><br><span class=\"line\">            FC01,   8, </span><br><span class=\"line\">            DC00,   8, </span><br><span class=\"line\">            DC01,   8, </span><br><span class=\"line\">            DV00,   8, </span><br><span class=\"line\">            DV01,   8, </span><br><span class=\"line\">            MD00,   8, </span><br><span class=\"line\">            MD01,   8, </span><br><span class=\"line\">            ,   16, </span><br><span class=\"line\">            ,   96, </span><br><span class=\"line\">            ,   16, </span><br><span class=\"line\">            ,   16, </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            Offset (0x42), </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            Offset (0x4A), </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            Offset (0x4D), </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            Offset (0x50), </span><br><span class=\"line\">            ,   8,  </span><br><span class=\"line\">            Offset (0x52), </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            Offset (0x64), </span><br><span class=\"line\">            ,   1, </span><br><span class=\"line\">            ,   1, </span><br><span class=\"line\">            Offset (0x65), </span><br><span class=\"line\">            ,   4, </span><br><span class=\"line\">            ,   1, </span><br><span class=\"line\">            ,   1, </span><br><span class=\"line\">            ,   1, </span><br><span class=\"line\">            ,   1, </span><br><span class=\"line\">            ,   8,             </span><br><span class=\"line\">            Offset (0x8B), </span><br><span class=\"line\">            ,   8, </span><br><span class=\"line\">            ,   64, </span><br><span class=\"line\">            HEM0,   8, </span><br><span class=\"line\">            HEM1,   8, </span><br><span class=\"line\">            HEM2,   8, </span><br><span class=\"line\">            HEM3,   8, </span><br><span class=\"line\">            ,   16, </span><br><span class=\"line\">            ,   16, </span><br><span class=\"line\">            TE00,   8, </span><br><span class=\"line\">            TE01,   8, </span><br><span class=\"line\">            TF00,   8, </span><br><span class=\"line\">            TF01,   8, </span><br><span class=\"line\">            ,   64, </span><br><span class=\"line\">            ,   128, </span><br><span class=\"line\">            Offset (0xC6)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面的修改有几个要点：</p>\n<ul>\n<li><strong>只清空不拆分的字节</strong></li>\n</ul>\n<p>对于<strong>未拆分的字节数据</strong>，就需要清空变量名，后面的数据保持不动。</p>\n<p>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACST,   1,</span><br></pre></td></tr></table></figure>\n\n<p> 这一行，清空变量名，就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">,   1,</span><br></pre></td></tr></table></figure>\n\n<p> 而那些<strong>拆分的字节数据</strong>，则不要去动，跳过去。</p>\n<ul>\n<li><strong>删除无拆分的offset块</strong></li>\n</ul>\n<p>如果两个<code>offset</code>块之间，没有任何<strong>拆分的字节数据</strong>，则这个块可以删除。比如对于我的而言：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...\t</span><br><span class=\"line\">TE00,   8, </span><br><span class=\"line\">        TE01,   8, </span><br><span class=\"line\">        TF00,   8, </span><br><span class=\"line\">        TF01,   8, </span><br><span class=\"line\">        ,   \t\t64, </span><br><span class=\"line\">        ,   \t\t128, </span><br><span class=\"line\">        Offset (0xC6), </span><br><span class=\"line\">        ,   \t\t8, </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        Offset (0xF1)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从<code>Offset (0xC6),</code>到<code>Offset (0xF1)</code>中间，再也没有任何<strong>拆分的字节数据</strong>，因此，我们可以抛弃这块的变量，只保留<code>Offset (0xC6)</code>，修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                  ...    </span><br><span class=\"line\">                  TE00,   8, </span><br><span class=\"line\">      TE01,   8, </span><br><span class=\"line\">      TF00,   8, </span><br><span class=\"line\">      TF01,   8, </span><br><span class=\"line\">      ,           64, </span><br><span class=\"line\">      ,           128, </span><br><span class=\"line\">      Offset (0xC6)  //此行之后的字节数据删除，并将末尾逗号去掉，表示到此结束</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一块修改完成后，进行编译。如无报错，则将文件保存编译为aml文件。至此，我们的电池热补丁制作完成。</p>\n<h1 id=\"添加改名补丁\"><a href=\"#添加改名补丁\" class=\"headerlink\" title=\"添加改名补丁\"></a>添加改名补丁</h1><p>接下来的过程，就与其他热补丁的改名过程无异了，我们需要生成并在Clover配置文件中添加<strong>引用修改字节的方法</strong>(需要注入Tgtbridge)。关于如何生成并添加这一补丁，我在我的触摸板教程第二版中有详细描述，不明白的可以点击<a href=\"http://bbs.pcbeta.com/viewthread-1797378-1-1.html\">这里</a>查看参考。对于潮7000 13寸来说，需要添加的是这些改名补丁：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name: change MHIF to XHIF in VPC0</span><br><span class=\"line\">Find: 4D484946</span><br><span class=\"line\">Replace: 58484946</span><br><span class=\"line\">TgtBridge: 56504330</span><br><span class=\"line\"></span><br><span class=\"line\">Name: change SMTF to XMTF in VPC0</span><br><span class=\"line\">Find: 534D5446</span><br><span class=\"line\">Replace: 584D5446</span><br><span class=\"line\">TgtBridge: 56504330</span><br><span class=\"line\"></span><br><span class=\"line\">Name: change GSBI to XSBI  in BAT0</span><br><span class=\"line\">Find: 47534249</span><br><span class=\"line\">Replace: 58534249</span><br><span class=\"line\">TgtBridge: 42415430</span><br><span class=\"line\"></span><br><span class=\"line\">Name: change _BIF to XBIF in BAT0</span><br><span class=\"line\">Find: 5F424946</span><br><span class=\"line\">Replace: 58424946</span><br><span class=\"line\">TgtBridge: 42415430</span><br><span class=\"line\"></span><br><span class=\"line\">Name: change _BST to XBST in BAT0</span><br><span class=\"line\">Find: 5F425354</span><br><span class=\"line\">Replace: 58425354</span><br><span class=\"line\">TgtBridge: 42415430</span><br></pre></td></tr></table></figure>\n\n<p>接下来，保存修改后的配置文件，将新配置文件与热补丁放入对应位置，删除DSDT，重启测试。如果修改没有问题，那么电池应该会如在DSDT下一般正常工作了。祝你好运！</p>\n<p>本教程所涉及的配置文件、热补丁与电池DSDT打包可以点击<a href=\"https://pan.baidu.com/s/1DppbiF2OEmAxbo9lnZXajA\">这里</a>下载。</p>\n","tags":[{"name":"DSDT","slug":"DSDT","permalink":"https://startpenghubingzhou.github.io/tags/DSDT/"},{"name":"电池","slug":"电池","permalink":"https://startpenghubingzhou.github.io/tags/%E7%94%B5%E6%B1%A0/"}]},{"title":"VoodooI2C编译教程","date":"2019-01-24T05:37:03.000Z","path":"2019/01/24/VoodooI2C Build/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文由本人原创，教程已首发黑苹果乐园下，<a href=\"https://imac.hk/build-voodooi2c-kext.html\">点击这里查看</a>。未经本人与黑苹果乐园官方允许，严禁转载抄袭！！！！</p>\n<p>对于目前绝大多数新本来说，使用VoodooI2C驱动触摸板是必不可少的。但是很多同学会很头疼Release驱动的各种问题（比如2.1.4版本的内核泄漏问题……），于是这个时候，编译最新版本驱动就成了几乎唯一的选择。编译最新的驱动可以获得最新的问题修改并获得新功能。</p>\n<p>当然对于大多数小白而言，编译驱动似乎遥不可及，甚至是天方夜谭。不过我想说的是，不要自己吓自己。接下来，我就来告诉各位小白：编译并用上最新的VoodooI2C，其实没那么难……</p>\n<span id=\"more\"></span> \n\n<h1 id=\"安装相关环境\"><a href=\"#安装相关环境\" class=\"headerlink\" title=\"安装相关环境\"></a>安装相关环境</h1><p>编译任何Mac驱动，我们都离不开Xcode工具，它是我们编译驱动的好帮手。下载Xcode十分简单，只需要在Mac App Store搜索并下载即可。当然了，如果你的黑果尚不能访问App Store，你也可以点击<a href=\"https://developer.apple.com/xcode/\">这里</a>下载。</p>\n<p>注意在这里下载前，要先注册一个Apple ID。</p>\n<h1 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h1><p>VoodooI2C项目由本体以及依赖和目标驱动三块组成。为了管理方便，作者亚历山大将其使用Submodule分割在了不同的仓库里。当我们编译的时候，就需要保证它们都在正确的位置才可以正常编译。</p>\n<p>由于操作命令行终端对于大多数小白是困难的，所以我这里不介绍如何使用git同步源码了，这里只介绍如何去github页面下载。</p>\n<p>以VoodooI2C的下载为例：</p>\n<p>1、 进入<a href=\"https://github.com/alexandred\">亚历山大的github源</a>(不得不说我亚历山大长得蛮帅的~)</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E4%BA%9A%E5%8E%86%E5%B1%B1%E5%A4%A7.png\" class=\"\" alt=\"my post image\">\n\n<p>2、点击repositories </p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E6%BA%90.png\" class=\"\" alt=\"my post image\">\n\n\n\n<p>2、 点击VoodooI2C进入，就可以看到源码以及说明</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E6%BA%90%E7%A0%81.png\" class=\"\" alt=\"my post image\">\n\n<p>3、 按照图示，依次点击下载</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E4%B8%8B%E8%BD%BD.png\" class=\"\" alt=\"my post image\">\n\n<p>等待下载完成后，我们就可以得到一份VoodooI2C源码了。</p>\n<p>同样地，依照此法，我们下载VoodooGPIO以及你的目标驱动源码。需要注意，下载得到的文件夹，要去掉-master后缀，对应放入VoodooI2C的文件夹下（VoodooGPIO放入dependencies，目标驱动放入VoodooI2C Satellite）。弹出替换提示不用管，直接替换就好。这样，我们待编译的源码就准备完毕了。</p>\n<h1 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h1><p>接下来，我们用Xcode打开源码文件夹根目录的VoodooI2C.xcworkspace文件。此时会弹出一个英文对话框，提示你此项目为网上下载，是否打开。点击open打开。</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E6%89%93%E5%BC%80.png\" class=\"\" alt=\"my post image\">\n\n<p>然后，我们需要删除两个关键的条目来保证编译成功。点击左侧VoodooI2C蓝色项目，然后在右侧点击Build Phases。</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E5%88%A0%E9%99%A4.png\" class=\"\" alt=\"my post image\">\n\n<p>图中画圈的两个条目我们不需要，删除它。然后我们点击左上角的编译按钮（一个类似播放的图标），驱动源码就会开始编译。</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/building.jpg\" class=\"\" alt=\"my post image\">\n\n<p>当显示build succeed 时，我们编译成功</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E6%88%90%E5%8A%9F.jpg\" class=\"\" alt=\"my post image\">\n\n<p>接下来，展开左侧窗格的product文件夹</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E5%B1%95%E5%BC%80.png\" class=\"\" alt=\"my post image\">\n\n<p>右击VoodooI2C.kext，选择show in finder，就可以看见编译好的驱动。</p>\n<img src=\"/2019/01/24/VoodooI2C%20Build/%E9%A9%B1%E5%8A%A8.png\" class=\"\" alt=\"my post image\">\n\n<p>到这里，我们的编译就算完成了，尽情享用你的新驱动吧~</p>\n","tags":[{"name":"驱动","slug":"驱动","permalink":"https://startpenghubingzhou.github.io/tags/%E9%A9%B1%E5%8A%A8/"},{"name":"I2C","slug":"I2C","permalink":"https://startpenghubingzhou.github.io/tags/I2C/"},{"name":"编译","slug":"编译","permalink":"https://startpenghubingzhou.github.io/tags/%E7%BC%96%E8%AF%91/"}]},{"title":"联想潮7000 14 EFI 3.2更新","date":"2019-01-23T05:37:03.000Z","path":"2019/01/23/Lenovo Xiaoxin Chao7000 14 EFI 3.2 Update/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>伴随14.3更新的到来 ，我也及时更新了EFI。本来这个版本应该和13寸的EFI一起发布，但是考虑更新14.3的需要，我决定提前放出来这个版本的更新。</p>\n<span id=\"more\"></span> \n\n<h1 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h1><p>本次更新内容不多，更新了以下内容：</p>\n<p><strong>1、修复HDMI输出问题</strong><br><strong>2、移除旧版VoodooSDHC驱动，添加新的读卡器驱动（有待测试）</strong><br><strong>3、移除12系列的配置文件（从本版本起停止对Sierra系列的支持）</strong><br><strong>4、更新四叶草版本至4895，支持14.3安装使用</strong></p>\n<p><strong>需要注意，由于目前13寸的热补丁移植尚存在问题，因此暂时不能将13寸项目合并，请见谅……</strong></p>\n<p>全版本统一下载地址：<a href=\"https://pan.baidu.com/s/1QcrvxI5a68eUH37RmNd-Fg#list/path=%2F\">点我下载</a></p>\n<p>在EFI包解压后根部的Sinetek-rtsk驱动即为读卡器驱动，这个驱动来自：<a href=\"https://github.com/sinetek/Sinetek-rtsx\">sinetek&#x2F;Sinetek-rtsx</a>，此驱动为瑞昱读卡器驱动（仍然在开发），机型读卡器经过本人对比查找为RTS5229，受此驱动支持。此驱动必须放入SLE目录并重建缓存然后才能使用，放在四叶草会引起错误，L&#x2F;E未测试。目前尚未测试插卡，需要测试。</p>\n<h1 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h1><p>目前存在的已知问题有：</p>\n<p><strong>1、摄像头问题（老生无解）</strong><br><strong>2、VoodooI2C右键问题（求Alex早日找出问题……）</strong></p>\n<p>其他问题有待各位反馈。目前先更新到这。</p>\n","tags":[{"name":"config","slug":"config","permalink":"https://startpenghubingzhou.github.io/tags/config/"},{"name":"更新","slug":"更新","permalink":"https://startpenghubingzhou.github.io/tags/%E6%9B%B4%E6%96%B0/"}]},{"title":"VoodooI2C触摸板驱动教程","date":"2019-01-06T05:37:03.000Z","path":"2019/01/06/VoodooI2C DSDT Edit/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇博客文章，是我在远景发布的教程：<a href=\"http://bbs.pcbeta.com/viewthread-1791962-1-1.html\">【他山之石，可以攻玉】黑苹果 I2C 触摸板驱动教程（分步）</a>和<a href=\"http://bbs.pcbeta.com/viewthread-1797378-1-1.html\">【积谷于此，以至四方】黑苹果 I2C 触摸驱动教程（第二版）</a>的姊妹篇。本博客整合了两版帖子（权且定为第三版吧，嘻嘻~）。如远景所言，这篇教程来自 <strong>Alexandred</strong> 的<a href=\"https://voodooi2c.github.io/\"> VoodooI2C 驱动教程官网</a>，本文基本忠实原文，并尽可能结合我的经验来谈如何修改 DSDT 驱动自己的 I2C 触摸板。</p>\n<span id=\"more\"></span> \n\n<p>在这篇教程即将开始之前，也欢迎各位加入我的黑苹果触摸板驱动 QQ 群 1：<strong>837538729</strong> QQ 群 2：<strong>921143329</strong>，来询问相关问题。我会尽可能为大家解决问题。</p>\n<hr>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"参数收集\"><a href=\"#参数收集\" class=\"headerlink\" title=\"参数收集\"></a>参数收集</h2><p>“<strong>工欲善其事，必先利其器</strong>”。对于 I2C 触摸板来说，首先要做的是明确你的触摸板是不是 I2C 触摸板。 明确了这一点，我们才能有的放矢，根据自己触摸板类型去有针对性地驱动自己的触摸板。 </p>\n<p>确认自己的设备是不是 I2C 设备其实很简单，在 win 下打开设备管理器，找到人体学输入设备，如果是 I2C 设备，那么现在你应该能看到一个 I2C HID(I2C USB) 设备： </p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E5%B1%9E%E6%80%A7.jpg\" class=\"\" alt=\"my post image\">\n\n<p>如果你能看到这个设备，说明你的触摸板是 I2C触摸板。否则，你的触摸板就是 PS2 类型的，请安装 <strong>VoodooPS2Controller</strong> 或者 <strong>AppleSmartTouchpad</strong>。（下载地址请参见博客的资源页面）</p>\n<p>另外需要注意：你需要确认自己的 CPU 平台以及架构代号。一般来说，根据后面 4 位数字型号的第一位，可以推测你的 Intel CPU 为几代 CPU，以及对应的架构。目前支持的架构有这些：</p>\n<p><strong>4 - Haswell</strong></p>\n<p><strong>5 - Broadwell</strong></p>\n<p><strong>6 - Skylake</strong></p>\n<p><strong>7 - Kaby Lake</strong></p>\n<p><strong>8 - Kaby Lake R &#x2F; Coffee Lake &#x2F; Cannon Lake &#x2F; Whiskey Lake……</strong></p>\n<p>如果你的 CPU 低于 4 代，VoodooI2C 是不能在其上工作的。 </p>\n<p>对于 VoodooI2C 来说，它能识别下面硬件 ID 的 I2C 设备： </p>\n<p><strong>‘INT33C2’ 和 ‘INT33C3’ - Haswell</strong></p>\n<p><strong>‘INT3432’ 和 ‘INT3433’ - Broadwell</strong></p>\n<p><strong>‘pci8086,9d60’, ‘pci8086,9d61’, ‘pci8086,9d62’, ‘pci8086,9d63’, ‘pci8086,a160’ 和 ‘pci8086,a161’ - Skylake &#x2F; Kaby Lake &#x2F; Kaby Lake R</strong></p>\n<p><strong>‘pci8086,9de8’, ‘pci8086,9de9’, ‘pci8086,a368’ 和 ‘pci8086,a369’ - Coffee Lake &#x2F; Cannon Lake &#x2F; Whiskey Lake</strong></p>\n<p>如果你确认了你的触摸板&#x2F;触摸屏是 I2C 设备并且在支持列表里，那么接下来你就可以继续进行你的准备工作。<strong>需要说明的是，对于 I2C USB 设备来说，接下来的步骤都没有必要，请直接移步安装步骤！！！</strong></p>\n<p>另外，要特别说明的是，一小部分的I2C控制器可能需要添加控制器id才可以使用，比如如下的控制器id：（具体的id请自行去win的设备属性里查找，此处不再赘述）</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E6%94%B9id.png\" class=\"\" alt=\"my post image\">\n\n<h2 id=\"寻找对应的ACPI模块\"><a href=\"#寻找对应的ACPI模块\" class=\"headerlink\" title=\"寻找对应的ACPI模块\"></a>寻找对应的ACPI模块</h2><hr>\n<hr>\n<p>在 DSDT 里，I2C 触摸设备会对应其 BIOS 设备名称下面，但是在一个完整的 DSDT 里，I2C 设备肯定不止一个，所以我们必须通过找出触摸板的 BIOS 设备名称来定位触摸板的 DSDT 代码片段。方法如下： </p>\n<p>1、打开设备管理器，找到 I2C HID 设备，双击打开属性 </p>\n<p>2、进入详细信息，点击下拉菜单，找到 “ BIOS 设备名称” 一项，并将它记录下来</p>\n<p>(有几个记录几个)</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/BIOS%E8%AE%BE%E5%A4%87%E5%90%8D%E7%A7%B0.jpg\" class=\"\" alt=\"my post image\">\n\n<p>这样，我们就完成了寻找对应的 ACPI 模块的操作。一般来说，I2C 触摸设备名字是这些中的一个(<strong>但并不绝对</strong>)：</p>\n<p>触摸板：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TPDX, ELAN, SYNA, CYPR, TPAD, ETPD</span><br></pre></td></tr></table></figure>\n\n<p>触摸屏：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TPLX, ELAN, ETPD, SYNA, ATML</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：这里的 X 代表某一个数字</strong></p>\n<hr>\n<h2 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h2><hr>\n<hr>\n<p>修改 DSDT 我们需要用到两款工具软件： IORegistryExplorer, Maciasl </p>\n<p>这里这两款软件都有特殊的要求。IORegistryExplorer 要求为 2.1 版本，Maciasl要求为 Rehabman 大神的编译版,下载地址可以自行百度搜索。</p>\n<h2 id=\"下载驱动\"><a href=\"#下载驱动\" class=\"headerlink\" title=\"下载驱动\"></a>下载驱动</h2><p>VoodooI2C 要求必须运行在 Clover（四叶草），除此之外，一个稳定的 Mac 环境也是先决条件，确保在驱动触摸板前你的显卡和电池电量显示已经正常工作，并且你还需要提取好一份完整的DSDT。这个地方我不想过多解释DSDT相关基础知识，有需要了解的请移步<a href=\"https://blog.csdn.net/wr132/article/details/54798754/\">这里</a>。 </p>\n<p>在这些工作完成之后，我们就可以开始下载 VoodooI2C 驱动。 最好的获取方法是进入 Github 获取最新的驱动(<a href=\"https://github.com/alexandred/VoodooI2C/releases\">下载地址</a>)。在 Releases 下的驱动最稳定。</p>\n<p>下载 Releases 的压缩包后，我们解压，会得到 1 个核心驱动和 5 个目标驱动，对 VoodooI2C 来说，它需要两个驱动来完成工作：VoodooI2C.kext（核心驱动）+ 一个目标驱动。 </p>\n<p>我们一共有四个目标驱动可供选择，它们的区别见下表：</p>\n<table>\n<thead>\n<tr>\n<th>驱动名称</th>\n<th>功能</th>\n<th>轮询模式</th>\n<th>中断模式</th>\n<th>是否需要调整 IONameMatch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>VoodooI2CELAN</strong></td>\n<td>支持 ELAN 触摸板</td>\n<td>❌</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><strong>VoodooI2CHID</strong></td>\n<td>支持大多数 I2C HID 多点触摸设备</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><strong>VoodooI2CUPDDEngine</strong></td>\n<td>UPDD 多点触控引擎</td>\n<td>❌</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><strong>VoodooI2CFTE</strong></td>\n<td>支持 FTE 触摸板</td>\n<td>❌</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n</tbody></table>\n<hr>\n<hr>\n<h1 id=\"准备修改\"><a href=\"#准备修改\" class=\"headerlink\" title=\"准备修改\"></a>准备修改</h1><h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><p>我们修改DSDT的目的，其核心在于让驱动识别触摸板的 GPIO 控制器，从而让驱动识别触摸板。对于极少的笔记本来说（如使用 Haswell 和 Boardwell 的设备），由于 GPIO 控制器本身就已经可以驱动，所以这类设备通常不需要打补丁也可以正常使用 VoodooI2C。</p>\n<p>VoodooI2C 支持三种模式： <strong>APIC 中断模式，GPIO 中断模式</strong>与<strong>轮询模式</strong>，这三种模式各有特点：APIC 中断基本不需要进行修改，功能完美，但是仅有极少数设备支持，GPIO 中断模式功能支持比较完善，但是修改量通常比较大，而且有可能出现 BUG 或者占用资源过高的问题（当然也更容易五国）（现在按理来说可以通过修补 FMCN &amp; SSCN 来解决）；而轮询模式是一种非常低效的模式，功能的支持可能会不太完善，不过轮询模式相比较中断模式而言适用范围更广。</p>\n<p>这两种模式究竟使用哪一种，需要结合你的 DSDT 代码和使用的驱动来定。目前能够同时支持这两种模式的驱动只有 <strong>VoodooI2CHID</strong>。</p>\n<h2 id=\"补丁应用\"><a href=\"#补丁应用\" class=\"headerlink\" title=\"补丁应用\"></a>补丁应用</h2><p>无论你使用哪一种工作模式，你首先都需要给你的 DSDT 应用 Windows 补丁。这个补丁可以在补丁源下面找到，根据你的出厂 Windows 系统版本来应用补丁就好，一般我们用的比较多的都是 Windows 10 Patch。如果你的Maciasl里并没有显示VoodooI2C-Patches补丁源，则接下来你将需要添加补丁源。添加步骤如下：</p>\n<p>1.打开Maciasl的设置选项：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E8%AE%BE%E7%BD%AE.png\" class=\"\" alt=\"my post image\">\n\n<p>2.点击source选项并输入图中地址：（由于gayhub国内连接速度极慢，请自行寻找方法提速）</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E6%B7%BB%E5%8A%A0.png\" class=\"\" alt=\"my post image\">\n\n<p>3.完成后回到主界面，点击patch按钮，应该显示如下的界面：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E6%98%BE%E7%A4%BA.png\" class=\"\" alt=\"my post image\">\n\n<p>如果出现了VoodooI2C-Patches的补丁源，则添加补丁源成功。</p>\n<p>如果你运行在 Skylake 的 CPU 下，通常你需要应用补丁源下的 SKL I2C Controller 补丁。这个补丁对于 Skylake 不一定会起作用，但是通常打上这个补丁也不会出什么问题，所以最好是应用这个补丁。</p>\n<p>如果你是 Skylake 平台或以上，那么如果想使用 GPIO 中断模式，你就必须对 GPIO 打补丁。应用补丁源下 GPIO Controller 补丁（中断模式）。</p>\n<p>下面，就针对这轮询和中断这两种方式进行 DSDT 修改讲解。</p>\n<hr>\n<hr>\n<h1 id=\"DSDT-修改\"><a href=\"#DSDT-修改\" class=\"headerlink\" title=\"DSDT 修改\"></a>DSDT 修改</h1><h2 id=\"中断模式\"><a href=\"#中断模式\" class=\"headerlink\" title=\"中断模式\"></a>中断模式</h2><p>接下来我们先介绍 GPIO 中断模式。这里的情况比较复杂，在做这项工作之前，请务必<strong>备份好自己的原有 DSDT</strong>，然后进行修改。<strong>注意：接下来的 DSDT 修改全都在你的触摸设备代码下进行，不要去修改其他地方！！！</strong></p>\n<h3 id=\"确认你的中断控制器类型\"><a href=\"#确认你的中断控制器类型\" class=\"headerlink\" title=\"确认你的中断控制器类型\"></a>确认你的中断控制器类型</h3><p>这一步需要确认你的中断控制器究竟是何种类型，在没有安装 VoodooI2C 驱动时，打开 IORegistryExplorer，搜索前面保存的 BIOS 设备名称，然后定位到 IOinterruptSpecifiers一项</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/iointerrupt.png\" class=\"\" alt=\"my post image\">\n\n<p>可以看到，窗口出现了一组十六进制数值。其中，最前面的两位数称为<strong>APIC pin值</strong>，这个值是你后面 DSDT 修改的重要依据，把它记录下来。</p>\n<p>如果你没有 IOinterruptSpecifiers 这一项或者 APIC pin 值不大于 2F（十六进制如何比较大小请自行百度），那么请移步到安装步骤。（此处有概率有例外）</p>\n<h3 id=\"移除-APIC-中断控制器-相关代码\"><a href=\"#移除-APIC-中断控制器-相关代码\" class=\"headerlink\" title=\"移除 APIC 中断控制器 相关代码\"></a>移除 APIC 中断控制器 相关代码</h3><p>VoodooI2C在以 GPIO 中断模式调用DSDT中触摸设备的_CRS方法时，一律使用 SBFG 参数而不是 SBFI 参数。因此到这里，我们需要对 CRS 方法进行修改，使其正确返回 SBFG 的值。</p>\n<p>用 MaciASL 打开你的 DSDT，然后搜索 SBFG （或者你的设备名），定位并仔细翻阅，你应该会找到一段类似于这样的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings               </span><br><span class=\"line\">&#123;                   </span><br><span class=\"line\">         Name (SBFI, ResourceTemplate ()                   </span><br><span class=\"line\">         &#123;                       </span><br><span class=\"line\">                   I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,                           </span><br><span class=\"line\">                              AddressingMode7Bit, &quot;\\\\_SB.PCI0.I2C1&quot;,                            </span><br><span class=\"line\">                              0x00, ResourceConsumer, , Exclusive,                            </span><br><span class=\"line\">                               )                       </span><br><span class=\"line\">                   Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )                        </span><br><span class=\"line\">                   &#123;                           </span><br><span class=\"line\">                               0x0000006D,                        </span><br><span class=\"line\">                   &#125;                    </span><br><span class=\"line\">                &#125;)                   </span><br><span class=\"line\">                Return (SBFI)                </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到之后，首先要将 SBFI 更名为 SBFB，并删除下段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                   Interrupt (ResourceConsumer, Level, ActiveLow, </span><br><span class=\"line\">Exclusive, ,, )    </span><br><span class=\"line\">\t\t\t\t   &#123;        </span><br><span class=\"line\">\t\t\t\t\t\t\t\t0x0000006D,    </span><br><span class=\"line\">\t\t\t\t   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如以我的为例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Name (SBFB, ResourceTemplate ()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,</span><br><span class=\"line\">                         AddressingMode7Bit, &quot;\\\\_SB.PCI0.I2C0&quot;,</span><br><span class=\"line\">                        0x00, ResourceConsumer, _Y2A, Exclusive,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Name (SBFI, ResourceTemplate ()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">                    Interrupt (ResourceConsumer, Level, ActiveLow, </span><br><span class=\"line\">Exclusive, ,, )</span><br><span class=\"line\">                     &#123;   </span><br><span class=\"line\">                                        0x0000006D,    </span><br><span class=\"line\">                     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面要求，就应该修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name (SBFB, ResourceTemplate ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t\t\t\tI2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,</span><br><span class=\"line\">\t\t\t\t\t\tAddressingMode7Bit, &quot;\\\\_SB.PCI0.I2C0&quot;,</span><br><span class=\"line\">\t\t\t\t\t   0x00, ResourceConsumer, _Y2A, Exclusive,</span><br><span class=\"line\">\t\t\t\t\t   )</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SBFG-Gpioint-修改\"><a href=\"#SBFG-Gpioint-修改\" class=\"headerlink\" title=\"SBFG (Gpioint) 修改\"></a>SBFG (Gpioint) 修改</h3><p>首先尝试在你触摸设备所对应的 DSDT 代码里搜索类似如下的这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name (SBFG, ResourceTemplate ()    </span><br><span class=\"line\">&#123;        </span><br><span class=\"line\">         GpioInt (Level, ActiveLow, ExclusiveAndWake,PullDefault,0x0000,           </span><br><span class=\"line\">                  &quot;\\\\_SB.PCI0.GPI0&quot;, 0x00, ResourceConsumer, ,            </span><br><span class=\"line\">                   )            </span><br><span class=\"line\">                   &#123;   // Pin list                </span><br><span class=\"line\">                        0x0000            </span><br><span class=\"line\">                   &#125;    </span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如我的是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name (SBFG, ResourceTemplate ()    </span><br><span class=\"line\">&#123;        </span><br><span class=\"line\">\t\tGpioInt (Level, ActiveLow, ExclusiveAndWake,PullDefault,0x0000,           </span><br><span class=\"line\">\t\t\t\t&quot;\\\\_SB.PCI0.GPI0&quot;, 0x00, ResourceConsumer, ,            </span><br><span class=\"line\">\t\t\t\t)            </span><br><span class=\"line\">\t\t\t\t&#123;   // Pin list                </span><br><span class=\"line\">\t\t\t\t\t0x0038            </span><br><span class=\"line\">\t\t\t\t&#125;    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果并没有这段代码，那么你需要在触摸设备的根目录下补上这段代码，像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scope (_SB.PCI0.I2C0)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           Device (TPAD)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               Name (SBFG, ResourceTemplate ()</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,</span><br><span class=\"line\">                            &quot;\\\\_SB.PCI0.GPI0&quot;, 0x00, ResourceConsumer, ,</span><br><span class=\"line\">                            )</span><br><span class=\"line\">                            &#123;   // Pin list</span><br><span class=\"line\">                                0x0038</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">               ......</span><br></pre></td></tr></table></figure>\n\n<p>如果有这段代码但蓝色字样的数值为 0，那么你就需要看看自己 _CRS 方法里是不是只有这一行语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Return (ConcatenateResTemplate (SBFB, SBFG))</span><br></pre></td></tr></table></figure>\n\n<p>如果只有这行代码，那么你就可以转入后续的完善热补丁步骤；否则就需要给其添加 GPIO Pin 数值。</p>\n<p>如果你是 SunrisePoint 架构 6 代 至 8 代 Kaby Lake-R 处理器（比如：8250U, 8550U）查找 <a href=\"https://github.com/coreboot/coreboot/blob/master/src/soc/intel/skylake/include/soc/gpio_defs.h#L43\"><strong>表一</strong></a>，寻找你之前的 APIC Pin 值，得到一个 IRQ 值；然后再前往 <a href=\"https://github.com/coreboot/coreboot/blob/master/src/soc/intel/skylake/include/soc/gpio_soc_defs.h#L37\"><strong>表二</strong> </a>根据 IRQ 找到一个对应的GPIO Pin值（10进制），把它转换为16进制值。如果这个十六进制数介于 5c 到 77 之间，那么这个数就是你需要的 GPIO Pin值。如果这个数不在这俩数之间，那你就会发现：你的 16 进制 APIC pin 值在表一对应了两个或以上的 IRQ 值。这就需要你分别对多个值进行测试，看哪个才是正确的。有的时候，也可能超出区间但是却只有一个值，那么尝试这个值就好。</p>\n<p>如果你是 CannonPoint(Lake) 架构 8&#x2F;9 代标压 Coffee Lake(-R)，查找 <a href=\"https://github.com/coreboot/coreboot/blob/master/src/soc/intel/cannonlake/include/soc/gpio_defs_cnp_h.h#L42\"><strong>表一</strong></a>，寻找你之前的 APIC Pin 值，得到一个 IRQ 值；然后再前往 <a href=\"https://github.com/coreboot/coreboot/blob/master/src/soc/intel/cannonlake/include/soc/gpio_soc_defs_cnp_h.h#L40\"><strong>表二</strong> </a>根据 IRQ 找到一个对应的 GPIO Pin 值（10进制），接着转到 <a href=\"https://github.com/coolstar/VoodooGPIO/blob/master/VoodooGPIO/CannonLake-LP/VoodooGPIOCannonLakeLP.hpp#L366\"><strong>GPIO Pin 转换公式</strong></a>，你会看到 “CHIPSET_GPP(数字, 基数, 终止, gpio_基数), &#x2F;* GPP_X *&#x2F;“ 用之前 IRQ 中 “GPP_” 后面的 英文字母（A, B, C…）找到你对应的转换值，用你的 10 进制 GPIO Pin 值减去“基数”然后加上“gpio_基数”，把最后得到数字转换为 16 进制就是你最后的 GPIO Pin</p>\n<p>如果你是 CannonPoint(Lake) 架构 8 代低压刷新 Whiskylake：以 65U 结尾的处理器（比如：8265U, 8565U），查找 <a href=\"https://github.com/coreboot/coreboot/blob/master/src/soc/intel/cannonlake/include/soc/gpio_defs.h#L42\"><strong>表一</strong></a>，寻找你之前的 APIC Pin 值，得到一个 IRQ 值；然后再前往 <a href=\"https://github.com/coreboot/coreboot/blob/master/src/soc/intel/cannonlake/include/soc/gpio_soc_defs.h#L45\"><strong>表二</strong> </a>根据 IRQ 找到一个对应的GPIO Pin值（10进制），接着转到 <a href=\"https://github.com/coolstar/VoodooGPIO/blob/master/VoodooGPIO/CannonLake-H/VoodooGPIOCannonLakeH.hpp#L414\"><strong>GPIO Pin 转换公式</strong></a>，你会看到 “CHIPSET_GPP(数字, 基数, 终止, gpio_基数), &#x2F;* GPP_X *&#x2F;“ 用之前 IRQ 中 “GPP_” 后面的 英文字母（A, B, C…）找到你对应的转换值，用你的 10 进制 GPIO Pin 值减去“基数”然后加上“gpio_基数”，把最后得到数字转换为 16 进制就是你最后的 GPIO Pin</p>\n<p>不过在某些极端状况下，你找到的值都不起作用的话。那么此时，你只能去尝试些比较常见的数值了，如<strong>0x17、0x1b、0x34</strong>和<strong>0x55</strong>。（仅限 SunrisePoint）</p>\n<p>总之，在完成之后，你需要把得到的 16 进制 GPIO pin 数值填入 SBFG 语句块里，像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name (SBFG, ResourceTemplate ()    </span><br><span class=\"line\">&#123;        </span><br><span class=\"line\">     GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,           </span><br><span class=\"line\">     \t\t\t&quot;\\\\_SB.PCI0.GPI0&quot;, 0x00, ResourceConsumer, ,            </span><br><span class=\"line\">      \t\t)            </span><br><span class=\"line\">      \t\t&#123;   // Pin list                </span><br><span class=\"line\">          \t\t0x17     // 这一行就是你需要填写的位置！            </span><br><span class=\"line\">      \t\t&#125;   </span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CRS-返回值的修改\"><a href=\"#CRS-返回值的修改\" class=\"headerlink\" title=\"CRS 返回值的修改\"></a>CRS 返回值的修改</h3><p>到这里，去 _CRS 方法下，确保所有返回语句只有这一条存在，像这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     Store (Zero, Local0)</span><br><span class=\"line\">                     Store (Zero, Local1)</span><br><span class=\"line\">                     Store (DerefOf (Index (DerefOf (Index (TPID, Local0)), Zero)), Local1)</span><br><span class=\"line\">                     While (LAnd (LNotEqual (Local1, 0xFE), LNotEqual (Local1, TPDF)))</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                         Increment (Local0)</span><br><span class=\"line\">                         If (LGreaterEqual (Local0, SizeOf (TPID)))</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                             Break</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t Store (DerefOf (Index (DerefOf (Index (TPID, Local0)), Zero)), Local1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tStore (DerefOf (Index (DerefOf (Index (TPID, Local0)), One)), ADR0)</span><br><span class=\"line\">\t\t\t\t\tStore (DerefOf (Index (DerefOf (Index (TPID, Local0)), 0x02)), HID2)</span><br><span class=\"line\">\t\t\t\t\tReturn (ConcatenateResTemplate (SBFB, SBFG))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"轮询模式\"><a href=\"#轮询模式\" class=\"headerlink\" title=\"轮询模式\"></a>轮询模式</h2><p>轮询模式所做的修改相对较少，我们只需要保证以下三点即可：</p>\n<p><strong>1、确保没有应用GPIO Controller 补丁</strong></p>\n<p><strong>2、确保没有做GPIO 的手动修改</strong></p>\n<p><strong>3、确保CRS返回值中只不返回 SBFG (Gpioint)</strong></p>\n<h3 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h3><p>在这针对一些问题，楼主进行下补充：</p>\n<p><strong>1、不是所有没有 IOinterruptSpecifiers 值或者值小于 2F 的设备都可以直接使用 VoodooI2C。这类设备中，有一部分必须依赖轮询方式。这类触摸板只需按照上面轮询的方法去修改即可。</strong><br><strong>2、对于八代的支持问题。在八代中，Kaby Lake R是唯一一个完美支持的，而对于 Coffee Lake、Cannon Lake、Whiskey Lake 等，代码移植已经进入尾声，现在诚邀这些设备参与测试，感谢你的配合。</strong></p>\n<p><strong>3、GPIO Pin 值问题。在找到 16 进制的 GPIO Pin 值的过程中，有时候可能出现找到的值只有一个却不在区间的情况，此时也要进行试验，如果不满足再试验其他。</strong></p>\n<hr>\n<hr>\n<h2 id=\"热补丁移植\"><a href=\"#热补丁移植\" class=\"headerlink\" title=\"热补丁移植\"></a>热补丁移植</h2><p>热补丁的修改是基于 DSDT 进行的，所以当这个教程 DSDT 修改部分和安装部分走完后，如果你确认你的 DSDT 可以驱动触摸板，就可以尝试将其提取出来，改造为热补丁。如果你的 DSDT 没有解决问题，也不要想着测试这个方法。</p>\n<p>目前六代的 Skylake 的 I2C Controller 热补丁已经制作完成，也可以进行热补丁移植工作了。</p>\n<h3 id=\"添加-GPIO-与-XOSI-热补丁\"><a href=\"#添加-GPIO-与-XOSI-热补丁\" class=\"headerlink\" title=\"添加 GPIO 与 XOSI 热补丁\"></a>添加 GPIO 与 XOSI 热补丁</h3><p>下载 <strong>SSDT-XOSI.aml</strong> 与 <strong>SSDT-GPIO.aml</strong>（如果你使用轮询模式，那么不要下载这个），解压并放在 ACPI&#x2F;Patched 目录下，然后在四叶草编辑器的 ACPI 选项卡下添加如下两个改名补丁：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change _OSI to XOSI</span><br><span class=\"line\"></span><br><span class=\"line\">Find：5F4F5349    Replace：584F5349</span><br><span class=\"line\"></span><br><span class=\"line\">change _STA to XSTA in GPI0 </span><br><span class=\"line\"></span><br><span class=\"line\">Find: 5F535441    Replace: 58535441   TgtBridge:47504930</span><br></pre></td></tr></table></figure>\n\n<p>如果你是六代Skylake的，那么还需要添加 SKL I2C Controller热补丁(详情见后文下载)</p>\n<h3 id=\"代码复制\"><a href=\"#代码复制\" class=\"headerlink\" title=\"代码复制\"></a>代码复制</h3><p>接下来，将你修改好的触摸设备的 ACPI 代码复制到<strong>SSDT-触摸样本.dsl</strong>的 DefinitionBlock 大括号内里，像这样：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E5%A4%8D%E5%88%B6%E4%B9%8B%E5%90%8E.png\" class=\"\" alt=\"my post image\">\n\n<p>复制之后，我们还要修正名称，来确保这个 SSDT 是正确的。修正的地方有三处：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E4%BF%AE%E6%94%B9%E5%90%8D%E7%A7%B0.png\" class=\"\" alt=\"my post image\">\n\n<p>第一处第二处都修正为你的 BIOS 名称，而第三处则还要带上 BIOS 名称的全路径（以我的为例）：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E4%BF%AE%E6%94%B9%E5%90%8E.png\" class=\"\" alt=\"my post image\">\n\n<p><strong>补充：经过本人实测，第一处的修不修改其实没有太大影响，不修改也是可以的。</strong></p>\n<h3 id=\"除错\"><a href=\"#除错\" class=\"headerlink\" title=\"除错\"></a><strong>除错</strong></h3><p>接下来，我们就进入了给热补丁排错的过程。</p>\n<p>点击 编译 (Compile)，你会发现此时热补丁会报一堆错误。这里面的错误，大多是因为缺少东西所致。你可能需要因此添加很多东西，比如引用Device、Method，还有一些数据等等。</p>\n<p>在我提供的样本里，已经提供了两个示例展示如何引用。在这，我还是补几张图说明下引用的过程。比如，以我的报错为例。你可以看到，在其中有一条提示缺少了 TPDD：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E6%8A%A5%E9%94%99.jpg\" class=\"\" alt=\"my post image\">\n\n<p>所以对应地，我们去 DSDT 搜索，直到最后定位到相应的数值（或者方法、设备以及它们的引用，最后定位只能是这几种）：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/tpdd.png\" class=\"\" alt=\"my post image\">\n\n<p>第一处表示了它的构造区域，第二处则表示这个名称的值。接下来，我们复制这个数据及其对应的构造区域到SSDT中：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/tpdd%E4%BF%AE%E6%94%B9.png\" class=\"\" alt=\"my post image\">\n\n<p>再点击 Compile，与 TPDD 相关的报错应该都消失了。</p>\n<p>除了这个之外，有时候我们缺失的是设备或者方法，我们只需要从 MaciASL 下方确认它的全路径，然后使用这条语句引用即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">External (xxxx.xxxx.xxxx, DeviceObj) //如果是方法，就使用Method0bj；如果是区域则使用FieldUnitObj</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：这条语句要放在 DefinitionBlock 块内的最前面！</strong></p>\n<p>总之，最后你的 SSDT 要同 DSDT 一样没有 ERROR，这才算完成：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/%E9%80%9A%E8%BF%87.png\" class=\"\" alt=\"my post image\">\n\n<p>热补丁教程中提及的有关热补丁我已经分享出来，<a href=\"https://pan.baidu.com/s/11A1wDi73gF0XVRmxw8sbwQ\">点击这里下载</a>。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>到这里，我们的修改就完成了，接下来就是安装。将你修改好的 DSDT（热补丁）放入 ACPI&#x2F;patched，再放入驱动。在这个时候，我们需要注意，系统里 AppleIntelLpssI2C.kext 和 AppleIntelLpssI2CController.kext 这两个驱动有可能会导致 VoodooI2C 驱动不工作，因此，有必要移除这两个驱动。你可以选择直接删除它们然后重建缓存，也可以选择用四叶草 Config进行屏蔽。屏蔽的配置文件详见<a href=\"https://github.com/RehabMan/OS-X-Clover-Laptop-Config/blob/master/config_patches.plist\">这里</a>。</p>\n<p>如果你使用的是热补丁方式，我们还需要<strong>改名 DSDT 里的触摸设备</strong>，来保证热补丁工作。</p>\n<p>首先利用 Hackintool 的计算器将你的触摸设备 BIOS 名称转换为 16 位 ASCII 码，然后给这个触摸设备改个名字来保证其不加载（比如改 TPAD 为 XPAD)，再次生成一串 16 位 ASCII 码，它们共同构成了一个 ACPI 补丁，用四叶草编辑器把它填入：</p>\n<img src=\"/2019/01/06/VoodooI2C%20DSDT%20Edit/XPAD.png\" class=\"\" alt=\"my post image\">\n\n<p>接下来我们重启，如果配置正确，那么现在你应该可以使用你的触摸板了。如果仍然不能使用，那么你需要重新排查，看看自己的操作是否存在问题。有其是热补丁，要格外注意啰嗦模式里面的 ACPI Error，如果出现这个要及时查看自己的配置文件 ACPI 改名是否正确。</p>\n<hr>\n<hr>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>VoodooI2C 使用 CSG 以及白果手势引擎来支持各种多点触控。其中，2.1.1后的版本，换用了白果手势引擎 (Magic Trackpad 2 模拟器)。这类手势可以通过系统设置里面触摸板的相关选项来设置。</p>\n<p>下面就是Voodooi2c所支持的所有手势列表：</p>\n<h5 id=\"CSG手势：\"><a href=\"#CSG手势：\" class=\"headerlink\" title=\"CSG手势：\"></a>CSG手势：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">·单击</span><br><span class=\"line\">·两指滚动</span><br><span class=\"line\">·三指配合alt的上下左右滚动</span><br><span class=\"line\">·四指滑动</span><br><span class=\"line\">·拖动（在“辅助功能”里的“鼠标和触摸板”中找到相关设置选项）</span><br><span class=\"line\">·向下 - Command + W</span><br><span class=\"line\">·向左- Command + Q</span><br><span class=\"line\">·向上 - 显示桌面</span><br><span class=\"line\">·向下 - Command + F11</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"白果手势：\"><a href=\"#白果手势：\" class=\"headerlink\" title=\"白果手势：\"></a>白果手势：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">·双指通知中心</span><br><span class=\"line\">·双指缩放</span><br><span class=\"line\">·双指返回（Safari浏览器）</span><br></pre></td></tr></table></figure>\n\n<p>另外，2.1.2以上的版本，加入了<strong>“鼠标插入时忽略内建触摸板”</strong>的功能配置以及<strong>“打字防误碰支持”</strong>（需要配合新版<strong>VoodooPS2Controller</strong>）</p>\n<p>教程已经大致更新完毕，后续仍会有补充。</p>\n<p>教程中少部分内容由 <a href=\"https://github.com/williambj1\">Bat.bat</a> 修补</p>\n","tags":[{"name":"I2C","slug":"I2C","permalink":"https://startpenghubingzhou.github.io/tags/I2C/"},{"name":"DSDT","slug":"DSDT","permalink":"https://startpenghubingzhou.github.io/tags/DSDT/"},{"name":"触摸板","slug":"触摸板","permalink":"https://startpenghubingzhou.github.io/tags/%E8%A7%A6%E6%91%B8%E6%9D%BF/"}]},{"title":"教你在Win下Clover硬盘安装黑苹果","date":"2019-01-05T05:37:03.000Z","path":"2019/01/05/Install Hackinstosh with Clover in Windows/","content":"<p>本教程同步自本人在远景所发教程！（<a href=\"http://bbs.pcbeta.com/viewthread-1798236-1-1.html\">原帖地址</a>)，这里再附上一个视频教程（感谢联想Y7000群的Z大热心制作）。将视频教程对照文字教程，效果将更加好！</p>\n<span id=\"more\"></span> \n\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNDA1ODE5MDY5Mg==\" frameborder=\"0\" 'allowfullscreen'=\"\" style=\"caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"></iframe>\n\n\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>本方法是传统的MacOS 10.11时代下流行的MBR硬盘安装方法的翻新版。在11时代，这种方法曾经大行其道，是黑果机友普遍采用的一种安装方法。当然即便放在现在，这种方法也不过时。这种方法,相比现在流行的U盘安装（尤其是USB3.0安装）有这些优点：</p>\n<p><strong>·直接硬盘安装，写入速度快，安装快</strong></p>\n<p><strong>·绕开USB，防止由于USB引起的各种安装问题（禁行、五国等）</strong></p>\n<p><strong>·软件操作简单，易上手，不易出错</strong></p>\n<p>相比于淘宝商家目前大行其道的恢复版则有这些优点：</p>\n<p><strong>·与U盘安装大同小异，学习简单</strong></p>\n<p><strong>·一次写入，随时恢复</strong></p>\n<p><strong>·体验完整的安装过程</strong></p>\n<p>那么接下来，就进入我们的硬盘安装教程——</p>\n<h1 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h1><hr>\n<p>我们硬盘安装所需要的工具如下：</p>\n<p><strong>·用于硬盘安装的CDR镜像以及Leopard硬盘安装助手（以上工具我已经打包放入网盘，下载地址点这里）</strong></p>\n<p><strong>·7Zip（下载地址）</strong></p>\n<p>由于12以后的镜像采用了新方式进行压制，所以我们不可以再像11时代那样直接用Leopard安装助手那样直接写入DMG来完成安装。因此，这里必须使用特殊制作的镜像来完成这一操作。</p>\n<p>教程里，我选择基于黑果小兵最新发布的10.14.1 镜像（<a href=\"https://macos-mojave-10.14.1-18b75-official-version-with-clover-4726-original-image.html/\">原帖点这里</a>）制作的CDR硬盘安装镜像来进行演示。镜像列表里除了12.6版本外，13.6、14、14.1均基于黑果小兵原版镜像，使用本教程的<a href=\"https://www.penghubingzhou.cn/2018/12/18/Win%E4%B8%8BCDR%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/\">配套教程</a>制作。镜像除了格式未修改任何地方，并且使用与发布已得到黑果小兵本人授权，请放心使用。</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%8E%88%E6%9D%83.png\" class=\"\" alt=\"my post image\">\n\n<p>下载下来的镜像只是硬盘安装的半成品，我们还需要提取其中真正可以用来制作的在所有工具全部下载完毕后，我们用7Zip打开我们下载的 CDR镜像，应该如图所示：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/7zip.png\" class=\"\" alt=\"my post image\">\n\n<p>其中的disk image.hfsx就是我们所需要的硬盘安装镜像。我们直接拖拽它到一个位置，它将会被解压并复制（如图）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%8F%90%E5%8F%96.jpg\" class=\"\" alt=\"my post image\">\n\n<p>最终，这个文件就会被提取出来。</p>\n<h1 id=\"分区准备\"><a href=\"#分区准备\" class=\"headerlink\" title=\"分区准备\"></a>分区准备</h1><hr>\n<p>接下来的步骤与传统的硬盘安装大同小异，但是略有不同。</p>\n<p>首先，我们需要先分一个分区，大小大概20GB左右，不要格式化（用什么方法都可以，只要做到我说的那两点就可以了）。此处问题过于基础，不再赘述。</p>\n<p>分区完成后，打开Leopard安装助手文件夹，<strong>右击ddmac.exe,选择“以管理员身份运行”</strong>（有多少硬盘安装失败的小伙伴都是因为漏了这一步导致后面不能选择分区），然后点击选择镜像旁边的浏览按钮（…)，找到刚才我们提取的disk image.hfsx（如图）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%89%93%E5%BC%80%E9%95%9C%E5%83%8F.png\" class=\"\" alt=\"my post image\">\n\n<p>如上图，如果正确，下面此时应该会显示镜像尺寸。然后我们再按照这个图进行配置：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%9B%B4%E6%94%B9%E6%9C%AA%E7%9F%A5.png\" class=\"\" alt=\"my post image\">\n\n<p>三个红圈的对应关系如下：</p>\n<p><strong>·最上的圈：将刚才你新建好的分区挂载到一个盘符下，然后选择这个分区</strong><br><strong>·第二个圈：除了写入选项，剩下三个全部勾掉</strong><br><strong>·第三个圈：如果操作正确，你会看到新建分区的体积</strong></p>\n<p>在这一切完成之后，我们点击开始，开始快速的写入过程：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%86%99%E5%85%A5.jpg\" class=\"\" alt=\"my post image\">\n\n<p><strong>注意：写入过程不要对电脑做任何操作，否则助手会假死。一旦假死，切勿强制结束，等待其自动写入完成恢复响应！！！</strong></p>\n<p>当看到<strong>“All done， have fun”</strong>字样时，我们镜像的写入就完成了。</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%86%99%E5%85%A5%E5%AE%8C%E6%88%90.jpg\" class=\"\" alt=\"my post image\">\n\n<p>到这里，虽然分区已经写入完毕，但还欠缺一个最重要的步骤，那就是<strong>改变分区标识符为AF</strong>。</p>\n<p>细心的人可能注意到上一张图里<strong>”Changing partiton to AF: failed“</strong>的字样，这也就是这一步关键所在！</p>\n<p>实际上，AF的作用与MBR时代的55AA标识符类似，是Mac引导记录的标志。如果不改变分区标识符为AF，开机四叶草可以认分区，但是加载到读取根文件目录时，将会因为找不到AF分区标识符禁行。</p>\n<p>但是在这里，我们又不能用传统的MBR 操作方法来改变，因为这是GPT。那我们该怎么办呢？其实很简单，只需要使用win自带的Diskpart工具即可。</p>\n<p>1、用命令提示符运行diskpart（会自动请求管理员权限，点击是），输入这条命令回车：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list disk</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/list%20disk.png\" class=\"\" alt=\"my post image\">\n\n<p>这里我的镜像写在了1T的机械上，所以接下来输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select  disk 1</span><br></pre></td></tr></table></figure>\n\n<p>然后回车：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/select%20disk.png\" class=\"\" alt=\"my post image\">\n\n<p>可以看到已经选中了，然后我们再显示该磁盘下所有分区：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list  partition</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/list%20partition.png\" class=\"\" alt=\"my post image\">\n\n<p>画红线的分区5是我们的镜像分区，输入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select  partition 5</span><br></pre></td></tr></table></figure>\n\n<p>然后回车。</p>\n\n\n<p>接着，我们要输入最关键的一条指令，它是让分区标识符变为AF的关键：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set id=48465300-0000-11AA-AA11-00306543ECAC</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后回车：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/success.png\" class=\"\" alt=\"my post image\">\n\n<p>显示这个界面时，我们就已经成功地改动了分区标识符为AF，输入EXIT回车退出。</p>\n<p>至此，我们成功完成了分区准备！</p>\n<h1 id=\"准备引导\"><a href=\"#准备引导\" class=\"headerlink\" title=\"准备引导\"></a>准备引导</h1><hr>\n<p>这个步骤是负责将四叶草写入EFI的步骤，这一教程实在过多，我在这里不再赘述。有需要的可以参考乐园这篇文章：<a href=\"https://imac.hk/clover-usb-install-add-boot-menu.html\">黑苹果 Clover 四叶草 u盘安装后如何改为硬盘EFI引导</a></p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><hr>\n<p>其实到这里，我们后面的步骤基本与正常的U盘安装一样了。不过作为一篇新手向教程，没有完整安装的过程是不太负责的，所以剩余的步骤，我也大致讲一下。</p>\n<p>首先，写入镜像后我们重启，可以找到刚才写入的镜像分区：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%AE%89%E8%A3%85%E5%88%86%E5%8C%BA.jpg\" class=\"\" alt=\"my post image\">\n\n<p>进入，开始启动安装（对我EFI的啰嗦图差评……）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%95%B0%E5%97%A61.jpg\" class=\"\" alt=\"my post image\">\n\n<p>安装的主界面：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A2.jpg\" class=\"\" alt=\"my post image\">\n\n<p>进入磁盘工具，找到自己要安装的分区，抹除（这里因为我装在机械上，所以选择了扩展式）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%8A%B9%E7%9B%98.jpg\" class=\"\" alt=\"my post image\">\n\n<p>静静等待抹除完成：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%8A%B9%E9%99%A4%E5%AE%8C%E6%88%90.jpg\" class=\"\" alt=\"my post image\">\n\n<p>接下来关闭磁盘工具，选择<strong>安装MacOS</strong>，点继续：</p>\n\n\n<p>一路向下回车：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E4%B8%80%E8%B7%AF%E5%9B%9E%E8%BD%A6.jpg\" class=\"\" alt=\"my post image\">\n\n<p>到安装盘这里，选择自己刚刚抹除的分区，点击安装：</p>\n\n\n<p>然后我们只需要静静等待第一段安装的完成（我这里虽然是机械，可是一段安装只用了4分钟，连喝咖啡时间都不够……）</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E4%B8%80%E6%AE%B5%E5%AE%89%E8%A3%85.jpg\" class=\"\" alt=\"my post image\">\n\n<p>第一段安装完成后，重启，四叶草界面再选安装的分区，回车进入（又一段啰嗦……）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%95%B0%E5%97%A62.jpg\" class=\"\" alt=\"my post image\">\n\n<p>进入到这个界面，标志着二段安装的开始（第二段安装较长，我等待了大概26分钟）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E4%BA%8C%E6%AE%B5%E5%AE%89%E8%A3%85.jpg\" class=\"\" alt=\"my post image\">\n\n<h1 id=\"完成配置\"><a href=\"#完成配置\" class=\"headerlink\" title=\"完成配置\"></a>完成配置</h1><hr>\n<p>二段安装完成后，我们将进入最后的配置。</p>\n<p>系统再次重启进入后，选择已经安装黑苹果的那个分区（啰嗦×3……）：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%95%B0%E5%97%A63.jpg\" class=\"\" alt=\"my post image\">\n\n<p>接着，我们将进入设置界面：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%8C%BA%E5%9F%9F%E8%AF%AD%E8%A8%80.jpg\" class=\"\" alt=\"my post image\">\n\n<p>按照需要，自己一路回车设置，并填写好账户密码，最后等待设置完成：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E8%AE%BE%E7%BD%AEmac.jpg\" class=\"\" alt=\"my post image\">\n\n<p>暗黑色的Mojave界面出来了，我们的安装顺利结束：</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E6%A1%8C%E9%9D%A2.jpg\" class=\"\" alt=\"my post image\">\n\n<p>到这里，我们的整篇教程已经全部结束了。最后补上一张关于本机的图作为本教程的结尾~</p>\n<img src=\"/2019/01/05/Install%20Hackinstosh%20with%20Clover%20in%20Windows/%E5%85%B3%E4%BA%8E%E6%9C%AC%E6%9C%BA.jpg\" class=\"\" alt=\"my post image\">","tags":[{"name":"镜像","slug":"镜像","permalink":"https://startpenghubingzhou.github.io/tags/%E9%95%9C%E5%83%8F/"},{"name":"Dmg","slug":"Dmg","permalink":"https://startpenghubingzhou.github.io/tags/Dmg/"},{"name":"EFI","slug":"EFI","permalink":"https://startpenghubingzhou.github.io/tags/EFI/"}]},{"title":"Win下CDR懒人硬盘安装镜像制作教程","date":"2018-12-18T05:37:03.000Z","path":"2018/12/18/CDR Image Making in Windows/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>此教程是远景帖子的同步更新篇，详细讲述如何在Win下制作硬盘安装镜像。</p>\n<p>CDR懒人安装镜像的优点是方便快捷，并且能写入硬盘，安装速度快。在11以前MBR大行其道的时代尚且具有不可比拟的优势，在现在固态GPT的时代也一样大有前途（尤其是在USB3.0与黑果存在问题的时候，一个硬盘安装可以节省出一大堆宝贵的时间来）。</p>\n<span id=\"more\"></span> \n\n<p>其实最开始，我已经摸索到如何制作CDR镜像，并且实现了在Win下硬盘安装镜像的提取。但是，在win下制作CDR安装镜像缺少一个重要的环节，那就是：<strong>缺少一个合适的工具，能够将DMG在win下转换为CDR。</strong></p>\n<p>直到大概18年的4月份的时候，我注意到了新版软碟通（UltralISO）的出现。在他的更新描述里，有这样一句话： 可以直接从Dmg映像制作 Mac OS X Mountain Lion 启动U盘（详情见<a href=\"https://cn.ultraiso.net/xiazai.html\">软碟通更新日志</a>）。</p>\n<p>就是这简短的一句话，使得这一个棘手的问题迎刃而解。抱着试验性的态度，我用13.6的镜像进行了测试，结果不出所料，能够正常制作并顺利进行安装。随后我又先后在12.6、14、14.1上进行了测试，都顺利通过。至此我断定，这是一个通用的制作方法。</p>\n<p>好东西当然要大家一起分享，现在就分享出我的方法。</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><hr>\n<p>其实方法本身简单易懂，首先你要下载最新的3519版软碟通并安装（<a href=\"https://cn.ultraiso.net/xiazai.html\">下载地址点这里</a>），打开“关于”之后应该是这个样子的：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E8%BD%AF%E7%A2%9F%E9%80%9A.png\" class=\"\" alt=\"my post image\">\n\n<p>然后打开你的DMG镜像（这里我以小兵14.1镜像为例）：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E6%89%93%E5%BC%80.png\" class=\"\" alt=\"my post image\">\n\n<p>然后我们点击菜单里的“工具”——“转换”：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E7%82%B9%E5%87%BB.jpg\" class=\"\" alt=\"my post image\">\n\n<p>弹出如下界面：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E5%AF%B9%E8%AF%9D%E6%A1%86.png\" class=\"\" alt=\"my post image\">\n\n<p><strong>敲黑板：输出格式这里我们一定要选择ISO格式！（事实上，就目前的镜像而言，苹果的CDR格式仍然是遵从了ISO压缩标准，因此转换为CDR，实质就是转化为ISO）</strong></p>\n<p>选择完成后，然后我们点转换，镜像将开始转换：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E5%BC%80%E5%A7%8B%E8%BD%AC%E6%8D%A2.png\" class=\"\" alt=\"my post image\">\n\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E8%BD%AC%E6%8D%A2%E5%AE%8C%E6%88%90.png\" class=\"\" alt=\"my post image\">\n\n<p>出现上面的转换完成对话框之后，我们可以在输出目录找到你的转好好的ISO镜像：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/%E8%BD%AC%E6%8D%A2%E5%A5%BD%E7%9A%84%E9%95%9C%E5%83%8F.png\" class=\"\" alt=\"my post image\">\n\n<p>画圈的是转换好的ISO镜像，现在将镜像的后缀名改为CDR，像这样：</p>\n<img src=\"/2018/12/18/CDR%20Image%20Making%20in%20Windows/cdr%E5%90%8E%E7%BC%80.png\" class=\"\" alt=\"my post image\">\n\n<p>现在这个镜像已经转换完成了，你现在可以进行硬盘安装了。</p>\n<p><strong>注意：</strong></p>\n<p><strong>1、转换好的镜像仍然允许你使用Transmac写入U盘，但不支持etcher写入。</strong></p>\n<p><strong>2、使用7Zip，你可以提取镜像中的EFI分区（里面会以EFI partition.img的形式存在）。</strong></p>\n","tags":[{"name":"安装","slug":"安装","permalink":"https://startpenghubingzhou.github.io/tags/%E5%AE%89%E8%A3%85/"},{"name":"镜像","slug":"镜像","permalink":"https://startpenghubingzhou.github.io/tags/%E9%95%9C%E5%83%8F/"}]},{"title":"联想潮7000 14 EFI 3.1更新","date":"2018-12-18T05:37:03.000Z","path":"2018/12/18/Lenovo Xiaoxin Chao7000 14 EFI 3.1 Update/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>这应该是今年最后一个潮7000 14寸EFI的更新了。回想这一年一路走来，黑果之路有过艰辛，有过坎坷。从零开始，在我的手下，潮7000 14从无到有，从触摸到变频再到多版本适配，一步一个脚印，日益完善。</p>\n<p>当然，楼主不是最先开始开发这一机型EFI的人，在我之前，早就有人发布了相应的EFI。小白伯同学完成了最早期的潮7000 14寸EFI的适配，并推出了13的安装版（他的原帖子详见<a href=\"http://bbs.pcbeta.com/viewthread-1763675-1-1.html\">这里</a>）。但是，在开发之初，我并不太清楚有这个帖子，所以我仍然是从零开始的。不过，也正是这次美丽的错过，才有了后来14寸从12、13到14全系列的适配EFI。应该说，这应该是一种缘分。</p>\n<p>最近博主的身体不算太好，就在发此文章的时候，博主刚刚退烧。不过即便是发烧，我们的更新还是要继续的！对于我来说，一个EFI新版本的发布要胜过病痛！！！</p>\n<p>好了，话不多说，接下来进入正题。</p>\n<span id=\"more\"></span> \n\n<h1 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h1><hr>\n<p>1、更新四叶草版本到4798，支持14.1和14.2的安装。</p>\n<p>2、使用VirtualSMC代替FakeSMC作为全新的SMC驱动。</p>\n<p>3、更新VoodooI2C驱动，解决了3.0 EFI 下由于VoodooI2C的内存泄漏引起的长时间使用死机崩溃问题（感谢**@kprissu**的修改。详情请见<a href=\"https://github.com/alexandred/VoodooI2C/commit/852c48f290512435c92ddaf6c33d0a468ab248ff\">这里</a>)</p>\n<p>4、更新了全新的暗黑Mojave主题（感谢**@chflame**的分享，原文请见<a href=\"http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1794804&highlight=%D3%A6%EF%BF%BD%EF%BF%BD\">这里</a>)</p>\n<p>5、更新WhateverGreen、Lilu到1.2.4和1.2.8</p>\n<p>6、添加NullEthernet虚拟内建网卡，USB网卡也可以直接打开App Store。</p>\n<h1 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h1><hr>\n<p>1、VoodooI2C驱动遗留问题（右键、“通知中心”手势）</p>\n<p>2、FaceTime黑屏问题（老生常谈）</p>\n<p>3、睡眠之后声卡问题（群友反映，放到下个版本解决）</p>\n<p>全版本下载地址：<a href=\"https://pan.baidu.com/s/1QcrvxI5a68eUH37RmNd-Fg#list/path=%2F\">点我下载</a></p>\n<h1 id=\"未来更新\"><a href=\"#未来更新\" class=\"headerlink\" title=\"未来更新\"></a>未来更新</h1><hr>\n<p>对于潮7000 14来说，目前基本在我能力范围的东西已经比较完美了。当然，诸如FaceTime摄像头瑕疵，还有VoodooI2C驱动问题，这目前还不在楼主的能力范围之内。</p>\n<p>“人生而有涯，而学也无涯”，我要学的还有很多。目前，我想要解决的一个重大问题就是13寸系列的适配。13寸已经很久无人更新，很多地方遗留问题。之前的热补丁更新，便是为未来13寸准备的。希望有更多人加入我的EFI的开发队伍，为更多黑果果友们造福！！！</p>\n<hr>\n<p>今天的更新到这就结束了。欢迎大家加入潮7000的交流群：<strong>729420933</strong>，跟我们分享你的使用心得，加入我们的开发队伍，享受最新的测试版本，体验最新的功能！</p>\n<hr>\n<p><strong>2019，祝大家，新年，新气象！！！</strong></p>\n","tags":[{"name":"IOKit","slug":"IOKit","permalink":"https://startpenghubingzhou.github.io/tags/IOKit/"},{"name":"驱动","slug":"驱动","permalink":"https://startpenghubingzhou.github.io/tags/%E9%A9%B1%E5%8A%A8/"}]}]